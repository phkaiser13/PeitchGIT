name: CI/CD - Multi-Platform Release

on:
  push:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VERSION: ${{ github.ref_type == 'tag' && github.ref_name || '0.0.0-dev' }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'

      - name: Install NSIS
        shell: pwsh
        run: |
          choco install nsis --yes --no-progress
          refreshenv || true

      - name: Configure CMake (MSVC, Visual Studio generator)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}/installed/x64-windows/share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}/installed/x64-windows/include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}/installed/x64-windows/lib/lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}/installed/x64-windows/lib/lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build Project
        run: cmake --build build --target gitph installer_helper --config Release --parallel

      - name: Create NSIS Installer
        shell: pwsh
        run: |
          $version = ($env:VERSION) -replace '^v',''
          if ([string]::IsNullOrWhiteSpace($version)) { $version = "0.0.0-dev" }
          Write-Host "Building installer version: $version"
          makensis -DVERSION=$version installer/windows/installer.nsi
          Get-ChildItem -Recurse -Filter "phgit_installer_*.exe" | ForEach-Object { Write-Host "Found: $($_.FullName)" }

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: gitph-windows-installer-${{ env.VERSION }}
          path: |
            **/phgit_installer_${{ env.VERSION }}.exe
