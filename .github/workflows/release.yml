#
# release.yml - Creates a GitHub Release after all build workflows complete successfully.
#
# This workflow uses the 'workflow_run' trigger, which is the correct way to
# orchestrate dependent workflows. It ensures that this job only starts AFTER
# the specified build workflows have finished.
#

name: Create GitHub Release

# This workflow is triggered on the completion of other specified workflows.
on:
  workflow_run:
    # A list of the EXACT names of the workflows that must complete before this one runs.
    # The names are taken from the 'name:' field in each build YAML file.
    workflows:
      - "Build gitph (Arch-like - containerized)"
      - "Build gitph (Fedora-like Linux)"
      - "Build gitph (macOS & Darwin systems)"
      - "Build gitph (Ubuntu/Debian-like Systems)"
      - "Build gitph (Windows)"
    # The type of event that triggers this workflow. 'completed' means it runs after the others finish.
    types:
      - completed

# Define permissions required for the job.
permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    # This job will only run if the workflows that triggered it were successful AND were for a tag.
    if: github.event.workflow_run.conclusion == 'success' && startsWith(github.event.workflow_run.head_branch, 'v')
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Download all release package artifacts from the COMPLETED build run.
      # We must specify the ID of the run that triggered this workflow.
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          # The ID of the workflow run that triggered this one. This is crucial.
          run-id: ${{ github.event.workflow_run.id }}
          # The destination path for all downloaded artifacts.
          path: release-assets/

      # Step 3: List downloaded files for debugging.
      # This will now correctly show all the downloaded packages.
      - name: List downloaded files
        run: ls -R release-assets/

      # Step 4: Create the GitHub Release and upload the assets.
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # The tag name is retrieved from the 'workflow_run' event context.
          tag_name: ${{ github.event.workflow_run.head_branch }}
          # The title of the release.
          name: Release ${{ github.event.workflow_run.head_branch }}
          # A generic body for the release.
          body: "Official release of version ${{ github.event.workflow_run.head_branch }}. See assets below for platform-specific packages."
          draft: false
          prerelease: false
          # The glob pattern now correctly finds all files inside the downloaded artifact folders.
          files: |
            release-assets/*/*
