name: CI/CD - Multi-Platform Release

# Roda em qualquer push (branches ou tags) e permite disparo manual
on:
  push:
  workflow_dispatch:

# Permissões para criar releases etc.
permissions:
  contents: write

jobs:
  # ============================================
  # 1. Build e pacote para Windows
  # ============================================
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'
          ninja-version: '1.11.x'

      # Instalando NSIS via Chocolatey (substitui ação inexistente)
      - name: Install NSIS
        shell: pwsh
        run: |
          choco install nsis --yes --no-progress
          refreshenv || true

      - name: Configure CMake (MSVC, Visual Studio generator)
        shell: pwsh
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\x64-windows\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}\installed\x64-windows\include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
          cmake -B build -G "Ninja"

      - name: Build Project
        run: cmake --build build --target gitph installer_helper

      - name: Create NSIS Installer
        # Passa a versão para o script .nsi; o seu script já usa -DVERSION
        shell: pwsh
        run: |
          makensis -DVERSION=${{ github.ref_name }} installer/windows/installer.nsi
          Write-Host "Listing installer output..."
          Get-ChildItem -Recurse -Filter "gitph-installer-*.exe" | ForEach-Object { $_.FullName }

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: gitph-windows-installer
          # usa glob para maior tolerância ao local do arquivo
          path: |
            **/gitph-installer-*.exe

  # ============================================
  # 2. Build e pacote para Linux (Ubuntu)
  # ============================================
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential ninja-build g++-multilib debhelper rpm fakeroot

      - name: Configure CMake
        run: cmake -B build -G "Ninja"

      - name: Build Project
        run: cmake --build build --target gitph

      - name: Create DEB Package
        run: |
          chmod +x installer/linux/build_deb.sh
          VERSION=${{ github.ref_name }} installer/linux/build_deb.sh

      - name: Create RPM Package
        run: |
          chmod +x installer/linux/build_rpm.sh
          VERSION=${{ github.ref_name }} installer/linux/build_rpm.sh

      - name: Upload Linux Packages
        uses: actions/upload-artifact@v4
        with:
          name: gitph-linux-packages
          path: |
            **/*.deb
            **/*.rpm

  # ============================================
  # 3. Build e pacote para macOS
  # ============================================
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure CMake
        run: cmake -B build -G "Ninja"

      - name: Build Project
        run: cmake --build build --target gitph

      - name: Create macOS Package (CPack Example)
        run: cpack --config CPackSourceConfig.cmake || echo "CPack returned non-zero; verifique o config"

      - name: Upload macOS Package
        uses: actions/upload-artifact@v4
        with:
          name: gitph-macos-package
          path: |
            **/*.dmg

  # ============================================
  # 4. Criar Release (APENAS quando o push for uma TAG)
  # ============================================
  create-release:
    runs-on: ubuntu-latest
    needs: [build-windows, build-linux, build-macos]
    # Só cria o release quando o evento é uma tag (ex: refs/tags/v1.0.0)
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            gitph-windows-installer/*.exe
            gitph-linux-packages/*.deb
            gitph-linux-packages/*.rpm
            gitph-macos-package/*.dmg
