

name: Release do Instalador (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-release:
    name: Compilar e Empacotar para Windows
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Instalar o CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      - name: Instalar dependências com vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      - name: Setup da toolchain Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      # --- PASSO ADICIONADO ---
      # Instala o NSIS para que o alvo 'package-windows' do CMake possa ser gerado.
      - name: Setup NSIS
        uses: crazy-max/ghaction-setup-nsis@v3

      - name: Configure CMake (MSVC, Visual Studio generator)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\x64-windows\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}\installed\x64-windows\include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Compilar o projeto (Build)
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # Este passo agora vai funcionar porque o NSIS foi encontrado pelo CMake.
      - name: Gerar o Instalador Windows (Package)
        run: cmake --build build --config Release --target package-windows
        shell: pwsh

      - name: Anexar Artefato do Instalador (CI)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: phgit-installer-windows-ci
          path: build/phgit_installer_*.exe
          retention-days: 5

      - name: Criar Release no GitHub
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: build/phgit_installer_*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
