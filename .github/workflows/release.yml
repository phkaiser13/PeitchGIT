# .github/workflows/release.yml
# Copyright (C) 2025 Pedro Henrique / phkaiser13
#
# SPDX-License-Identifier: Apache-2.0
#
# Este workflow é responsável por criar uma release no GitHub.
# Ele é acionado após a conclusão bem-sucedida dos workflows de build
# e empacota os artefatos de cada plataforma em um formato de distribuição.

name: 'Criação de Release'

on:
  workflow_run:
    # Aciona este workflow quando os workflows de build listados terminam na branch main
    workflows:
      - "Build do gitph"                                # Nome do workflow Ubuntu-Like_ci.yml
      - "Build gitph (Fedora-like Linux)"               # Nome do workflow Fedora-like_ci.yml
      - "Build gitph (Arch-like - containerized)"       # Nome do workflow Arch-like_ci.yml
      - "Build gitph (Windows)"                         # Nome do workflow Windows_ci.yml
      - "Build gitph (macOS & Darwin systems)"          # Nome do workflow Mac-DarwinLike_ci.yml
    types:
      - completed
    branches:
      - main

jobs:
  release:
    name: 'Criar Release e Empacotar Artefatos'
    # Executa apenas se o workflow acionador foi bem-sucedido e se for um push (não em PRs)
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão necessária para criar a release

    steps:
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      - name: 'Extrair versão do CMakeLists.txt'
        id: get_version
        run: |
          # Extrai a versão do projeto do arquivo CMakeLists.txt para nomear a tag da release
          VERSION=$(grep -oP 'project\(gitph VERSION \K[0-9.]+' CMakeLists.txt)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Tag da Release: v${VERSION}"

      - name: 'Baixar todos os artefatos dos builds'
        uses: actions/download-artifact@v4
        with:
          # Associa os artefatos ao workflow que acionou este
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
          # O download-artifact criará diretórios com os nomes dos artefatos
          # Ex: ./gitph-build-artifacts-arch-x86_64/, ./gitph-build-artifacts-ubuntu-x86_64/, etc.

      - name: 'Organizar e empacotar artefatos'
        run: |
          # Cria o diretório de releases
          mkdir -p release_packages

          # Função para criar o pacote tar.gz
          create_package() {
            local ARTIFACT_DIR=$1
            local PLATFORM_NAME=$2
            local VERSION=$3
            # Nome do projeto corrigido para 'gitph'
            local RELEASE_NAME="gitph-v${VERSION}-${PLATFORM_NAME}"
            
            echo "Empacotando o conteúdo de '${ARTIFACT_DIR}' em '${RELEASE_NAME}.tar.gz'"
            
            if [ ! -d "${ARTIFACT_DIR}" ]; then
              echo "Aviso: Diretório do artefato '${ARTIFACT_DIR}' não encontrado. Pulando."
              return
            fi

            # Empacota o conteúdo do diretório, não o diretório em si, usando -C
            tar -czf "release_packages/${RELEASE_NAME}.tar.gz" -C "${ARTIFACT_DIR}" .
          }
          
          # Ubuntu
          create_package "gitph-build-artifacts-ubuntu-x86_64" "ubuntu-x86_64" "${{ env.VERSION }}"
          create_package "gitph-build-artifacts-ubuntu-arm64" "ubuntu-arm64" "${{ env.VERSION }}"
          
          # Windows
          create_package "gitph-build-artifacts-windows-x86_64/Release" "windows-x86_64" "${{ env.VERSION }}"
          create_package "gitph-build-artifacts-windows-arm64/Release" "windows-arm64" "${{ env.VERSION }}"
          
          # Fedora
          create_package "gitph-build-artifacts-fedora-x86_64" "fedora-x86_64" "${{ env.VERSION }}"
          create_package "gitph-build-artifacts-fedora-arm64" "fedora-arm64" "${{ env.VERSION }}"
          
          # Arch (NOVA SEÇÃO PARA AS MÚLTIPLAS ARQUITETURAS)
          create_package "gitph-build-artifacts-arch-x86_64" "arch-x86_64" "${{ env.VERSION }}"
          create_package "gitph-build-artifacts-arch-aarch64" "arch-aarch64" "${{ env.VERSION }}"
          
          # macOS
          create_package "gitph-build-artifacts-macos-x86_64" "macos-x86_64" "${{ env.VERSION }}"
          create_package "gitph-build-artifacts-macos-arm64" "macos-arm64" "${{ env.VERSION }}"

          echo "Pacotes de release prontos:"
          ls -l release_packages

      - name: 'Criar Release e Anexar Pacotes'
        uses: softprops/action-gh-release@v2
        with:
          # Usa a versão extraída como nome da tag
          tag_name: "v${{ env.VERSION }}"
          # Anexa todos os pacotes .tar.gz criados
          files: release_packages/*.tar.gz
          # Gera o corpo da release automaticamente com base nos commits
          generate_release_notes: true
