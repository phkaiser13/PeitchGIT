# Copyright (C) 2025 Pedro Henrique / phkaiser13
# SPDX-License-Identifier: Apache-2.0

name: Build and Release gitph

# Este workflow executa SOMENTE em um push de tags que correspondem ao padrão 'v*'
on:
  push:
    tags:
      - 'v*'

jobs:
  #--- JOB DE BUILD PARA UBUNTU/DEBIAN ---
  build_ubuntu:
    name: Build (Ubuntu)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install system dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential cmake pkg-config liblua5.4-dev libcurl4-openssl-dev nlohmann-json3-dev
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Compile Project
        run: cmake --build build --parallel
      - name: Create Release Package
        run: tar -czvf gitph-ubuntu-linux-x86_64.tar.gz -C build/bin . src/plugins/ LICENSE
      - name: Upload Release Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitph-release-package-ubuntu
          path: gitph-ubuntu-linux-x86_64.tar.gz
          retention-days: 7

  #--- JOB DE BUILD PARA FEDORA ---
  build_fedora:
    name: Build (Fedora)
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install system dependencies (Fedora)
        run: |
          dnf -y update && dnf install -y gcc-c++ make cmake pkgconf-pkg-config lua-devel libcurl-devel openssl-devel nlohmann-json-devel git tar gzip which && dnf clean all
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Compile Project
        run: cmake --build build --parallel
      - name: Create Release Package
        run: tar -czvf gitph-fedora-linux-x86_64.tar.gz -C build/bin . src/plugins/ LICENSE
      - name: Upload Release Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitph-release-package-fedora
          path: gitph-fedora-linux-x86_64.tar.gz
          retention-days: 7

  #--- JOB DE BUILD PARA ARCH LINUX ---
  build_arch:
    name: Build (Arch Linux)
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Initialize Pacman Keyring
        run: |
          pacman-key --init
          pacman-key --populate archlinux
      - name: Install system dependencies (Arch)
        run: pacman -Syu --noconfirm --needed base-devel cmake lua curl nlohmann-json go rust git pkgconf
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Compile Project
        run: cmake --build build --parallel
      - name: Create Release Package
        run: tar -czvf gitph-arch-linux-x86_64.tar.gz -C build/bin . src/plugins/ LICENSE
      - name: Upload Release Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitph-release-package-arch
          path: gitph-arch-linux-x86_64.tar.gz
          retention-days: 7

  #--- JOB DE BUILD PARA MACOS (INTEL & APPLE SILICON) ---
  build_macos:
    name: Build (macOS ${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-13
            arch: x86_64
          - os: macos-14
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dependencies (Homebrew)
        run: brew install cmake pkg-config lua curl nlohmann-json
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
      - name: Compile Project
        run: cmake --build build --parallel
      - name: Create Release Package
        run: tar -czvf gitph-macos-${{ matrix.arch }}.tar.gz -C build/bin . src/plugins/ LICENSE
      - name: Upload Release Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitph-release-package-macos-${{ matrix.arch }}
          path: gitph-macos-${{ matrix.arch }}.tar.gz
          retention-days: 7

  #--- JOB DE BUILD PARA WINDOWS ---
  build_windows:
    name: Build (Windows x64)
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Configure CMake (MSVC)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\\scripts\\buildsystems\\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release
        shell: pwsh
      - name: Build Project
        run: cmake --build build --config Release --parallel
        shell: pwsh
      - name: Create Release Package
        run: |
          mkdir staging
          copy-item build/Release/*.exe staging/
          copy-item build/Release/*.dll staging/
          copy-item -Path "build/bin/modules" -Destination "staging/" -Recurse
          copy-item src/plugins staging/ -Recurse
          copy-item LICENSE staging/
          Compress-Archive -Path staging/* -DestinationPath gitph-windows-x64.zip
        shell: pwsh
      - name: Upload Release Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gitph-release-package-windows-x64
          path: gitph-windows-x64.zip
          retention-days: 7

  #--- JOB DE RELEASE ---
  # Este job SÓ SERÁ EXECUTADO após todos os jobs listados em 'needs' terminarem com sucesso.
  create_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Permissão necessária para criar a release
    needs: [build_ubuntu, build_fedora, build_arch, build_macos, build_windows]
    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets/ # Baixa todos os artefatos para esta pasta

      - name: List downloaded files for verification
        run: ls -R release-assets/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: "Official release of version ${{ github.ref_name }}. See assets below for platform-specific packages."
          draft: false
          prerelease: false
          files: |
            release-assets/*/*
