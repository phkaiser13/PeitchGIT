#
# release.yml - Workflow to publish a GitHub Release.
#
# This workflow is triggered ONLY when a new tag starting with 'v' is pushed.
# Its sole responsibility is to:
# 1. Download all the release packages (.tar.gz, .zip) created by the various build workflows.
# 2. Create a single, formal GitHub Release associated with the tag.
# 3. Automatically generate release notes based on commit history since the last tag.
# 4. Upload all the downloaded packages as assets to that GitHub Release.
#
# This ensures a clean separation of concerns: build workflows build, release workflow releases.
#

name: Create GitHub Release

on:
  # This workflow runs ONLY when a tag starting with 'v' (e.g., v1.0, v2.3.4) is pushed.
  push:
    tags:
      - 'v*'

jobs:
  # The single job in this workflow is to publish the release.
  publish-release:
    name: Publish GitHub Release
    # Runs on the latest Ubuntu runner, which is sufficient for API calls and file handling.
    runs-on: ubuntu-latest
    
    # This is a critical security best practice.
    # The workflow needs 'contents: write' permission to create a release and upload assets.
    # By explicitly granting only this permission, we follow the principle of least privilege.
    permissions:
      contents: write

    steps:
      # Step 1: Download all release artifacts from the current workflow run.
      # When a tag is pushed, all build workflows and this release workflow are triggered.
      # This step will automatically find and download all artifacts that were uploaded
      # by the parallel build jobs (Arch, Fedora, Ubuntu, macOS, Windows).
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          # The destination path for the downloaded artifacts.
          # Each artifact will be placed in its own subdirectory here.
          path: release-artifacts

      # Step 2 (Optional but Recommended): Display the downloaded file structure.
      # This is extremely useful for debugging to ensure all packages were downloaded correctly
      # before attempting to upload them.
      - name: Display structure of downloaded files
        run: ls -R release-artifacts

      # Step 3: Create the GitHub Release and upload the assets.
      # This action is the standard for creating releases. It's powerful and reliable.
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # The action will automatically find files matching these patterns
          # within the workspace and upload them as release assets.
          # The patterns are designed to find the .tar.gz and .zip files inside
          # the subdirectories created by the download-artifact step.
          files: |
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.zip
          
          # This fantastic feature automatically creates release notes
          # by summarizing the commits since the last release tag.
          generate_release_notes: true
