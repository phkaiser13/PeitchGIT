# # Copyright (C) 2025 Pedro Henrique / phkaiser13
# # build_and_release_windows.yml - Workflow de CI/CD para Windows (x64, x86, ARM64)
# #
# # Este workflow automatiza a compilação, o teste e a publicação da aplicação gitph no Windows.
# # Ele emprega uma estratégia de matriz para abranger múltiplas arquiteturas e usa o vcpkg
# # para um gerenciamento de dependências C/C++ robusto.
# #
# # SPDX-License-Identifier: Apache-2.0

# name: Build e Release Multi-Arquitetura (Windows)

# on:
#   push:
#     branches: [ "main" ]
#     tags:
#       - 'v*' # Aciona o job de release
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   build:
#     name: Build em ${{ matrix.name }}
#     # A estratégia de matriz executa este job para cada combinação de configuração.
#     strategy:
#       fail-fast: false # Garante que todos os jobs da matriz rodem, mesmo que um falhe.
#       matrix:
#         include:
#           - name: "Windows x64"
#             os: windows-latest
#             arch: x64
#             vcpkg_triplet: x64-windows
#             cmake_platform: x64
#           - name: "Windows x86"
#             os: windows-latest
#             arch: x86
#             vcpkg_triplet: x86-windows
#             cmake_platform: Win32
#           - name: "Windows ARM64"
#             os: windows-latest-arm64
#             arch: arm64
#             vcpkg_triplet: arm64-windows
#             cmake_platform: ARM64

#     runs-on: ${{ matrix.os }}

#     steps:
#       - name: Checkout do código do projeto
#         uses: actions/checkout@v4

#       - name: Checkout do vcpkg
#         uses: actions/checkout@v4
#         with:
#           repository: 'microsoft/vcpkg'
#           path: vcpkg

#       - name: Instalar dependências C++ com vcpkg
#         shell: powershell
#         run: |
#           cd vcpkg
#           ./bootstrap-vcpkg.bat
#           # Usa o vcpkg_triplet da matriz para instalar para a arquitetura correta
#           ./vcpkg.exe install curl:${{ matrix.vcpkg_triplet }} lua:${{ matrix.vcpkg_triplet }} nlohmann-json:${{ matrix.vcpkg_triplet }}
#           cd ..

#       - name: Setup Go
#         uses: actions/setup-go@v5
#         with:
#           go-version: '1.21'

#       - name: Setup Rust
#         uses: dtolnay/rust-toolchain@stable
#         with:
#           toolchain: stable
      
#       - name: Cache de dependências Rust
#         uses: Swatinem/rust-cache@v2

#       - name: Configurar CMake
#         shell: powershell
#         run: |
#           cmake -S . -B build `
#             -G "Visual Studio 17 2022" `
#             -A ${{ matrix.cmake_platform }} `
#             -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

#       - name: Compilar o Projeto (Release)
#         run: cmake --build build --config Release --parallel

#       - name: Preparar artefatos para upload
#         shell: powershell
#         run: |
#           $ARTIFACT_DIR = "artifacts"
#           New-Item -ItemType Directory -Force -Path $ARTIFACT_DIR
#           Copy-Item -Path "build/bin/Release/*" -Destination $ARTIFACT_DIR -Force
#           Copy-Item -Path "src/plugins/*" -Destination "$ARTIFACT_DIR/modules" -Recurse -Force
#           Copy-Item -Path "LICENSE" -Destination $ARTIFACT_DIR -Force

#       - name: Upload dos artefatos de build
#         uses: actions/upload-artifact@v4
#         with:
#           name: gitph-build-artifacts-windows-${{ matrix.arch }}
#           path: artifacts/

#   release:
#     name: Criar Release no GitHub
#     needs: build # Depende da conclusão de todos os jobs da matriz de build
#     runs-on: ubuntu-latest # O job de release pode rodar em Linux para economizar custos
#     if: startsWith(github.ref, 'refs/tags/v') # Só executa quando uma tag 'v*' é criada

#     steps:
#       - name: Download de todos os artefatos de build
#         uses: actions/download-artifact@v4
#         with:
#           path: artifacts/ # O download será para 'artifacts/<artifact-name>/'
          
#       - name: Empacotar para Release
#         shell: bash
#         run: |
#           # Loop através de cada diretório de artefato baixado
#           for ARCH_DIR in artifacts/gitph-build-artifacts-windows-*; do
#             ARCH_NAME=$(basename "$ARCH_DIR" | sed 's/gitph-build-artifacts-windows-//')
#             VERSION="${{ github.ref_name }}"
#             RELEASE_NAME="gitph-${VERSION}-windows-${ARCH_NAME}"
            
#             echo "Empacotando $RELEASE_NAME..."
            
#             # Cria o arquivo ZIP a partir do conteúdo do diretório do artefato
#             (cd "$ARCH_DIR" && zip -r "../../${RELEASE_NAME}.zip" .)
#           done
          
#           # Lista os arquivos ZIP criados para passar para o próximo step
#           ls *.zip
#           echo "RELEASE_ASSETS=$(ls *.zip | tr '\n' ' ')" >> $GITHUB_ENV

#       - name: Publicar Release no GitHub
#         uses: softprops/action-gh-release@v2
#         with:
#           # Anexa todos os arquivos .zip criados como assets da release
#           files: ${{ env.RELEASE_ASSETS }}
#           generate_release_notes: true # Gera notas de release automaticamente
