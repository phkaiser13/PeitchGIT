# Copyright (C) 2025 Pedro Henrique / phkaiser13
# win_ci.yml - Workflow de Integração Contínua para Windows
#
# Este workflow automatiza o processo de build e release da aplicação no Windows.
# Ele usa o gerenciador de pacotes vcpkg para instalar as dependências C/C++
# de forma robusta e se integra com o CMake para compilar todos os componentes.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout do código do projeto
        uses: actions/checkout@v4
        with:
          path: main

      # 1. Clona o vcpkg para um diretório conhecido
      - name: Checkout do vcpkg
        uses: actions/checkout@v4
        with:
          repository: 'microsoft/vcpkg'
          path: vcpkg
      
      # 2. Executa o bootstrap para compilar o vcpkg e instala as dependências
      - name: Instalar dependências com vcpkg
        shell: powershell
        run: |
          cd vcpkg
          ./bootstrap-vcpkg.bat
          ./vcpkg.exe install curl:x64-windows lua:x64-windows nlohmann-json:x64-windows
          cd ..

      # 3. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 4. Configura o ambiente Rust (com cache)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
        with:
          # Define o diretório de trabalho para que o cache funcione corretamente
          # já que nosso projeto não está na raiz.
          working-directory: main

      # 5. Configura o CMake usando o toolchain do vcpkg
      - name: Configurar CMake
        shell: powershell
        run: |
          $VCPKG_TOOLCHAIN_FILE = "${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake"
          cd main
          cmake -S . -B build `
            -G "Visual Studio 17 2022" `
            -DCMAKE_TOOLCHAIN_FILE=$VCPKG_TOOLCHAIN_FILE
      
      # 6. Compila o projeto
      - name: Compilar Projeto
        run: cmake --build main/build --config Release --parallel

      # 7. Salva os artefatos de build para o job de release
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            main/build/bin/Release/
            main/src/plugins/
            main/LICENSE

  release:
    name: Criar Release (Windows)
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: artifacts/

      - name: Empacotar para Release
        shell: powershell
        run: |
          $VERSION = "${{ github.ref_name }}"
          $ARCH = "x86_64"
          $RELEASE_NAME = "gitph-${VERSION}-windows-${ARCH}"
          $RELEASE_DIR = "release/${RELEASE_NAME}"
          
          New-Item -ItemType Directory -Force -Path "${RELEASE_DIR}/modules" | Out-Null
          
          Copy-Item -Path "artifacts/Release/*" -Destination $RELEASE_DIR -Force
          Copy-Item -Path "artifacts/plugins/*" -Destination "${RELEASE_DIR}/modules" -Recurse -Force
          Copy-Item -Path "artifacts/LICENSE" -Destination $RELEASE_DIR -Force
          
          # Remove DLLs que já estão na pasta de módulos para não duplicar
          Remove-Item -Path "${RELEASE_DIR}/ci_cd_parser.dll", "${RELEASE_DIR}/ci_cd_visualizer.dll", "${RELEASE_DIR}/git_ops.dll", "${RELEASE_DIR}/sync_engine.dll", "${RELEASE_DIR}/issue_tracker.dll" -ErrorAction SilentlyContinue

          $ZIP_PATH = "release/${RELEASE_NAME}.zip"
          Compress-Archive -Path "${RELEASE_DIR}/*" -DestinationPath $ZIP_PATH
          
          echo "RELEASE_PATH=${ZIP_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
