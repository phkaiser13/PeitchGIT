# Copyright (C) 2025 Pedro Henrique / phkaiser13
# main_ci_windows.yml - Workflow de Integração Contínua para Windows
#
# Este workflow automatiza o build e release da aplicação no Windows.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste no Windows
    runs-on: windows-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # Instalação das dependências no Windows (exemplo: via Chocolatey)
      - name: Instalar dependências via Chocolatey
        shell: powershell
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force;
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));
          choco install -y cmake visualstudio2019buildtools visualstudio2019-workload-vctools

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # Configurar e compilar com CMake (Windows)
      - name: Configurar CMake (Release)
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G "Visual Studio 17 2022"

      - name: Compilar Projeto
        run: cmake --build build --config Release -- /m

      # Upload dos artefatos compilados
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts
          path: |
            build\Release\
            src\plugins\
            LICENSE

  release:
    name: Criar Release no Windows
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts
          path: artifacts\

      - name: Empacotar para Release
        shell: powershell
        run: |
          $VERSION = "${{ github.ref_name }}"
          $RELEASE_NAME = "gitph-$VERSION-windows-$env:PROCESSOR_ARCHITECTURE".ToLower()
          $releasePath = "release\$RELEASE_NAME"
          
          # Criar estrutura de diretórios
          New-Item -ItemType Directory -Force -Path "$releasePath\modules" | Out-Null
          
          # Copiar arquivos
          Copy-Item -Path "artifacts\Release\*" -Destination $releasePath -Recurse -Force
          Copy-Item -Path "artifacts\plugins\*" -Destination "$releasePath\modules" -Recurse -Force
          Copy-Item -Path "artifacts\LICENSE" -Destination $releasePath -Force
          
          # Remover símbolos de debug (exemplo usando llvm-strip, se disponível)
          $stripExe = "C:\Program Files\LLVM\bin\llvm-strip.exe"
          if (Test-Path $stripExe) {
            Write-Host "Removendo símbolos de debug..."
            & $stripExe "$releasePath\gitph.exe"
            Get-ChildItem "$releasePath\modules" -Recurse -Include *.dll | ForEach-Object {
              & $stripExe $_.FullName
            }
          } else {
            Write-Host "llvm-strip não encontrado, pulando remoção de símbolos."
          }
          
          # Compactar para ZIP (mais comum em Windows)
          $zipFile = "release\$RELEASE_NAME.zip"
          if (Test-Path $zipFile) { Remove-Item $zipFile }
          Compress-Archive -Path $releasePath\* -DestinationPath $zipFile

          echo "RELEASE_PATH=$zipFile" >> $env:GITHUB_ENV

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
