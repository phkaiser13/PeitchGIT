# Copyright (C) 2025 Pedro Henrique / phkaiser13
# win_ci.yml - Workflow de Integração Contínua para Windows
#
# Este workflow automatiza o processo de build e release da aplicação no Windows.
# Ele usa o gerenciador de pacotes vcpkg para instalar as dependências C/C++
# de forma robusta e se integra com o CMake para compilar todos os componentes.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

# Define a localização do vcpkg para ser usada entre os jobs
env:
  VCPKG_ROOT: ${{ github.workspace }}/vcpkg
  VCPKG_DEFAULT_TRIPLET: x64-windows

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # 1. Instala e configura o vcpkg
      - name: Instalar vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ env.VCPKG_ROOT }}
          vcpkgTriplet: ${{ env.VCPKG_DEFAULT_TRIPLET }}
          # Lista de dependências C/C++ necessárias
          vcpkgJsonGlob: '**/vcpkg.json' # Recomendado para projetos maiores
          vcpkgPackages: lua,libcurl,nlohmann-json

      # 2. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Configura o ambiente Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 4. Configura o CMake usando o toolchain do vcpkg
      #    O toolchain do vcpkg automatiza a localização de todas as bibliotecas.
      - name: Configurar CMake
        run: |
          cmake -S . -B build `
            -G "Visual Studio 17 2022" `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake

      # 5. Compila o projeto
      #    O --config Release é importante para geradores multi-configuração como o Visual Studio.
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel

      # 6. Salva os artefatos de build para o job de release
      #    Os binários no Windows ficam dentro de um subdiretório com o nome da configuração (ex: Release)
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/
            src/plugins/
            LICENSE

  release:
    name: Criar Release (Windows)
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: artifacts/

      # Empacota os arquivos em um .zip, que é o padrão para Windows
      - name: Empacotar para Release
        shell: powershell
        run: |
          # Determina a versão e o nome do pacote
          $VERSION = "${{ github.ref_name }}"
          $ARCH = "x86_64" # Arquitetura padrão para runners do GitHub
          $RELEASE_NAME = "gitph-${VERSION}-windows-${ARCH}"
          $RELEASE_DIR = "release/${RELEASE_NAME}"
          
          # Cria a estrutura de diretórios para o release
          New-Item -ItemType Directory -Force -Path "${RELEASE_DIR}/modules" | Out-Null
          
          # Copia os arquivos dos artefatos para a estrutura final
          Copy-Item -Path "artifacts/Release/*" -Destination $RELEASE_DIR -Force
          Copy-Item -Path "artifacts/plugins/*" -Destination "${RELEASE_DIR}/modules" -Recurse -Force
          Copy-Item -Path "artifacts/LICENSE" -Destination $RELEASE_DIR -Force
          
          # Remove os módulos do parser/visualizer da pasta raiz (eles já estão em /modules)
          Remove-Item -Path "${RELEASE_DIR}/ci_cd_parser.dll", "${RELEASE_DIR}/ci_cd_visualizer.dll" -ErrorAction SilentlyContinue

          # Cria o arquivo .zip
          echo "Criando o pacote .zip..."
          $ZIP_PATH = "release/${RELEASE_NAME}.zip"
          Compress-Archive -Path "${RELEASE_DIR}/*" -DestinationPath $ZIP_PATH
          
          # Exporta o caminho do .zip para o próximo passo
          echo "RELEASE_PATH=${ZIP_PATH}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # Publica o .zip na release do GitHub
      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
