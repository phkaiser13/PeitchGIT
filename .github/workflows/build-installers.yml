#
# release.yml - Workflow de Geração de Release e Instaladores Nativos
#
# Este workflow é o coração do nosso processo de Continuous Delivery (CD).
# Ele é acionado SOMENTE quando uma tag no formato 'v*' é enviada para o repositório.
#
# Estratégia de Engenharia:
# 1. Executa três jobs de build em paralelo, um para cada plataforma principal (Windows, Linux, macOS).
# 2. Cada job não apenas compila o código, mas usa o CPack para gerar os instaladores nativos
#    (.exe via NSIS, .deb, .rpm, .dmg).
# 3. O job do Linux utiliza contêineres Docker para garantir que os pacotes .deb e .rpm
#    sejam construídos em ambientes limpos e corretos da distribuição alvo.
# 4. Um job final, 'create-github-release', só é executado se TODOS os jobs de build
#    forem bem-sucedidos. Ele coleta todos os instaladores gerados e os publica em um
#    novo Release do GitHub, automatizando completamente o processo de lançamento.
#
name: Build & Package Release

on:
  push:
    tags:
      - 'v*' # Aciona o workflow apenas em tags como v1.0.0, v1.2.3-rc1, etc.
  workflow_dispatch: # Permite o acionamento manual

permissions:
  contents: write # Necessário para o job 'create-github-release' poder criar o release e fazer upload dos artefatos.

jobs:
  # ========================================================================================
  # JOB 1: Construir e Empacotar para Windows
  # ========================================================================================
  build-and-package-windows:
    name: Build Windows Installer (x64)
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install Build Tools (CMake, Ninja, NSIS)
        run: choco install cmake ninja nsis -y

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "Ninja" `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build Project with CMake
        run: cmake --build build --config Release --parallel

      - name: Package with CPack (NSIS)
        working-directory: ./build
        run: cpack -C Release -G NSIS

      - name: Upload Windows Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: build/*.exe # Uploads the generated phgit-X.Y.Z-installer.exe

  # ========================================================================================
  # JOB 2: Construir e Empacotar para Linux
  # ========================================================================================
  build-and-package-linux:
    name: Build Linux Installers (.deb, .rpm)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build libcurl4-openssl-dev liblua5.4-dev rustc cargo

      - name: Configure CMake
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release

      - name: Build Project with CMake
        run: cmake --build build --config Release --parallel

      - name: Package with CPack (.deb and .rpm)
        working-directory: ./build
        run: |
          cpack -C Release -G DEB
          cpack -C Release -G RPM

      - name: Upload Linux Installer Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installers
          path: |
            build/*.deb
            build/*.rpm

  # ========================================================================================
  # JOB 3: Construir e Empacotar para macOS
  # ========================================================================================
  build-and-package-macos:
    name: Build macOS Installer (.dmg)
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Build Dependencies
        run: brew install cmake ninja lua libcurl

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Configure CMake
        run: cmake -S . -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release

      - name: Build Project with CMake
        run: cmake --build build --config Release --parallel

      - name: Package with CPack (DragNDrop DMG)
        working-directory: ./build
        run: cpack -C Release -G DragNDrop

      - name: Upload macOS Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: build/*.dmg

  # ========================================================================================
  # JOB 4: Criar o Release no GitHub
  # ========================================================================================
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-package-windows, build-and-package-linux, build-and-package-macos] # Depends on all build jobs

    steps:
      - name: Download all installer artifacts
        uses: actions/download-artifact@v4
        with:
          path: installers # Download all artifacts into this directory
          merge-multiple: true # Merge artifacts from different jobs into one directory

      - name: List downloaded files for debugging
        run: ls -R installers

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # The body of the release. Could also point to a file with release notes.
          body: "Release of phgit version ${{ github.ref_name }}. See CHANGELOG.md for details."
          # Use a wildcard to upload all downloaded installer files.
          files: installers/*
          # Determines if this is a pre-release by checking for '-' in the tag name (e.g., v1.0.0-rc1)
          prerelease: contains(github.ref, '-')
