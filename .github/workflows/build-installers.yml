# .github/workflows/build-package-release.yml
# Copyright (C) 2025 Pedro Henrique / phkaiser13
# SPDX-License-Identifier: Apache-2.0

name: Build, Package, and Release Installers

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-package:
    name: Build Installer on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            artifact_glob: "phgit-installer-*.exe"
            asset_name_suffix: "windows-x64.exe"
          - name: Linux
            os: ubuntu-latest
            artifact_glob: "phgit-installer-*.deb"
            asset_name_suffix: "linux-amd64.deb"
          - name: macOS
            os: macos-latest
            artifact_glob: "phgit-installer-*.dmg"
            asset_name_suffix: "macos-universal.dmg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # ---------------------------
      # Install platform deps
      # ---------------------------
      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential cmake ninja-build pkg-config libcurl4-openssl-dev
        shell: bash

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install cmake ninja curl
        shell: bash

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=System"' ninja nsis
        shell: pwsh

      # Optional: install vcpkg on Windows for native deps (makes Windows builds reproducible)
      - name: Setup vcpkg (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '1b47e02435323c1c7c37196994f234503d376d1b'
          vcpkgArguments: 'install curl nlohmann-json spdlog'
          vcpkgTriplet: 'x64-windows-static'

      # ---------------------------
      # Configure / Build / Package
      # ---------------------------

      - name: Configure CMake (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cmake -S ./installer -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release
        shell: bash

      - name: Configure CMake (Windows)
        if: runner.os == 'Windows'
        run: |
          # Use vcpkg toolchain when available (set by lukka/run-vcpkg)
          $toolchain = ""
          if ($env:VCPKG_ROOT) { $toolchain = "-DCMAKE_TOOLCHAIN_FILE=`"$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake`"" }
          cmake -S ./installer -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release $toolchain
        shell: pwsh

      - name: Build with CMake
        run: cmake --build build --config Release --parallel
        shell: bash
        # On Windows runner, bash is available; if you prefer PowerShell for Windows, the next step would use pwsh.
        # If you prefer to force pwsh on Windows, add `if: runner.os == 'Windows'` and duplicate step with pwsh.

      - name: Package with CPack
        run: |
          cd build
          cpack -C Release --verbose
        shell: bash

      # ---------------------------
      # Find artifact & upload
      # ---------------------------
      - name: Find and prepare artifact for upload (Linux/macOS)
        if: runner.os != 'Windows'
        id: find_artifact
        run: |
          ARTIFACT_PATH=$(find build -type f -name "${{ matrix.artifact_glob }}" | head -n 1)
          if [ -z "$ARTIFACT_PATH" ]; then
            echo "No artifact found matching: ${{ matrix.artifact_glob }}"
            exit 1
          fi
          echo "Found artifact: $ARTIFACT_PATH"
          FINAL_ASSET_NAME="phgit-installer-${{ matrix.asset_name_suffix }}"
          mv "$ARTIFACT_PATH" "$FINAL_ASSET_NAME"
          echo "artifact_path=$FINAL_ASSET_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Find and prepare artifact for upload (Windows)
        if: runner.os == 'Windows'
        id: find_artifact
        run: |
          $artifact = Get-ChildItem -Path build -Recurse -File -Filter "${{ matrix.artifact_glob }}" | Select-Object -First 1
          if (-not $artifact) {
            Write-Error "No artifact found matching: ${{ matrix.artifact_glob }}"
            exit 1
          }
          Write-Host "Found artifact: $($artifact.FullName)"
          $final = "phgit-installer-${{ matrix.asset_name_suffix }}"
          Rename-Item -Path $artifact.FullName -NewName $final -Force
          Write-Output "artifact_path=$final" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        shell: pwsh

      - name: Upload build artifact (Actions)
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.name }}
          path: ${{ steps.find_artifact.outputs.artifact_path }}
          retention-days: 7

      - name: Upload Asset to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.find_artifact.outputs.artifact_path }}
          asset_name: ${{ steps.find_artifact.outputs.artifact_path }}
          asset_content_type: application/octet-stream
