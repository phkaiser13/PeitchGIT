name: Build phgit (Multi-Platform)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux (${{ matrix.distro }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - distro: ubuntu
            container: ubuntu:latest
            package_manager: apt
            deps_command: |
              apt-get update && apt-get install -y \
                build-essential \
                cmake \
                libssl-dev \
                pkg-config \
                liblua5.4-dev \
                libcurl4-openssl-dev \
                nlohmann-json3-dev \
                git \
                curl
          - distro: fedora
            container: fedora:latest
            package_manager: dnf
            deps_command: |
              dnf -y update
              dnf install -y \
                gcc-c++ \
                make \
                cmake \
                pkgconf-pkg-config \
                lua-devel \
                libcurl-devel \
                openssl-devel \
                nlohmann-json-devel \
                binutils \
                git \
                tar \
                gzip \
                which \
                curl
              dnf clean all
          - distro: arch
            container: archlinux:latest
            package_manager: pacman
            deps_command: |
              pacman-key --init
              pacman-key --populate archlinux
              pacman -Syu --noconfirm --needed \
                base-devel \
                cmake \
                lua \
                curl \
                nlohmann-json \
                go \
                rust \
                git \
                pkgconf

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.distro }})
        run: ${{ matrix.deps_command }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Test phgit execution (Linux - ${{ matrix.distro }})
        run: |
          echo "Testing phgit executable..."
          if [ -f build/phgit ]; then
            echo "Found phgit executable at build/phgit"
            # Test basic execution (--help or --version should work without errors)
            timeout 10s ./build/phgit --help || echo "phgit --help failed or timed out"
            timeout 10s ./build/phgit --version || echo "phgit --version failed or timed out"
            echo "phgit execution test completed for ${{ matrix.distro }}"
          elif [ -f build/bin/phgit ]; then
            echo "Found phgit executable at build/bin/phgit"
            timeout 10s ./build/bin/phgit --help || echo "phgit --help failed or timed out"
            timeout 10s ./build/bin/phgit --version || echo "phgit --version failed or timed out"
            echo "phgit execution test completed for ${{ matrix.distro }}"
          else
            echo "ERROR: phgit executable not found in expected locations!"
            echo "Listing build directory contents:"
            find build -name "phgit*" -type f || true
            exit 1
          fi

      - name: Run unit tests (Fedora only)
        if: matrix.distro == 'fedora' && always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: phgit-build-artifacts-${{ matrix.distro }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

  build-Darwin:
    name: Build Darwin (${{ matrix.arch }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            arch: x86_64
          - os: macos-latest
            arch: Silicon
    runs-on: ${{ matrix.os }}


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Homebrew)
        run: brew install cmake pkg-config lua curl nlohmann-json

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Test phgit execution (Darwin - ${{ matrix.arch }})
        run: |
          echo "Testing phgit executable on Darwin ${{ matrix.arch }}..."
          if [ -f build/bin/phgit ]; then
            echo "Found phgit executable at build/bin/phgit"
            # Test basic execution
            timeout 10s ./build/bin/phgit --help || echo "phgit --help failed or timed out"
            timeout 10s ./build/bin/phgit --version || echo "phgit --version failed or timed out"
            echo "phgit execution test completed for Darwin ${{ matrix.arch }}"
          elif [ -f build/phgit ]; then
            echo "Found phgit executable at build/phgit"
            timeout 10s ./build/phgit --help || echo "phgit --help failed or timed out"
            timeout 10s ./build/phgit --version || echo "phgit --version failed or timed out"
            echo "phgit execution test completed for Darwin ${{ matrix.arch }}"
          else
            echo "ERROR: phgit executable not found in expected locations!"
            echo "Listing build directory contents:"
            find build -name "phgit*" -type f || true
            exit 1
          fi

      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: phgit-build-artifacts-Darwin-${{ matrix.arch }}
          path: |
            build/bin/
            src/plugins/
            LICENSE
          retention-days: 3

  build-windows:
    name: Build Windows (x64)
    runs-on: windows-latest

    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows
      RUSTFLAGS: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      - name: Install Ninja
        run: choco install ninja -y

      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Debug vcpkg installed files
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\share" -Recurse -Depth 2 | Select-Object -First 200
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\bin" -Recurse -Depth 1 | Select-Object -First 200
        shell: pwsh

      - name: Configure CMake (MSVC, Visual Studio generator)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\x64-windows\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}\installed\x64-windows\include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build Project
        run: cmake --build build --config Release --parallel
        shell: pwsh

      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure
        shell: pwsh
        continue-on-error: true

      - name: Copy Runtime DLLs
        run: |
          $vcpkgBinDir = "${{ env.VCPKG_ROOT }}\installed\x64-windows\bin"
          $targetBinDir = "build\bin\Release"

          Write-Host "Copying DLLs from $vcpkgBinDir to $targetBinDir"

          New-Item -ItemType Directory -Force -Path $targetBinDir

          $dllsToCopy = @(
              "lua.dll",
              "libcurl.dll",
              "libcrypto-3-x64.dll",
              "libssl-3-x64.dll",
              "zlib1.dll"
          )

          foreach ($dll in $dllsToCopy) {
              $sourcePath = Join-Path $vcpkgBinDir $dll
              $destinationPath = Join-Path $targetBinDir $dll
              if (Test-Path $sourcePath) {
                  Copy-Item -Path $sourcePath -Destination $destinationPath -Force
                  Write-Host "  Copied $dll"
              } else {
                  Write-Warning "  DLL not found: $sourcePath. This might indicate a missing dependency or an issue with vcpkg installation."
              }
          }
        shell: pwsh

      - name: Test phgit execution (Windows x64)
        run: |
          Write-Host "Testing phgit executable on Windows x64..."
          $exePath = "build\bin\Release\phgit.exe"
          
          if (Test-Path $exePath) {
              Write-Host "Found phgit executable at $exePath"
              
              # Test basic execution with timeout (10 seconds)
              try {
                  Write-Host "Testing phgit --help..."
                  $process = Start-Process -FilePath $exePath -ArgumentList "--help" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "phgit_help_output.txt" -RedirectStandardError "phgit_help_error.txt"
                  if ($process.ExitCode -eq 0) {
                      Write-Host "phgit --help executed successfully"
                  } else {
                      Write-Host "phgit --help returned exit code: $($process.ExitCode)"
                      if (Test-Path "phgit_help_error.txt") {
                          Write-Host "Error output:"
                          Get-Content "phgit_help_error.txt"
                      }
                  }
              } catch {
                  Write-Host "phgit --help failed with exception: $($_.Exception.Message)"
              }
              
              try {
                  Write-Host "Testing phgit --version..."
                  $process = Start-Process -FilePath $exePath -ArgumentList "--version" -Wait -PassThru -NoNewWindow -RedirectStandardOutput "phgit_version_output.txt" -RedirectStandardError "phgit_version_error.txt"
                  if ($process.ExitCode -eq 0) {
                      Write-Host "phgit --version executed successfully"
                  } else {
                      Write-Host "phgit --version returned exit code: $($process.ExitCode)"
                      if (Test-Path "phgit_version_error.txt") {
                          Write-Host "Error output:"
                          Get-Content "phgit_version_error.txt"
                      }
                  }
              } catch {
                  Write-Host "phgit --version failed with exception: $($_.Exception.Message)"
              }
              
              Write-Host "phgit execution test completed for Windows x64"
          } else {
              Write-Host "ERROR: phgit executable not found at $exePath!"
              Write-Host "Listing build directory contents:"
              Get-ChildItem -Path "build" -Recurse -Filter "*phgit*" | ForEach-Object { Write-Host $_.FullName }
              exit 1
          }
        shell: pwsh

      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: phgit-build-artifacts-windows-x64
          path: |
            build/bin/
            src/plugins/
            LICENSE

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $releaseDir = "phgit-release"
          $buildBinDir = "build/bin/Release"
          $pluginsDir = "src/plugins"
          $licenseFile = "LICENSE"
          $tagVersion = "${{ github.ref_name }}"
          $zipFileName = "phgit-windows-x64-$tagVersion.zip"

          Write-Host "Preparing release package for version: $tagVersion"
          Write-Host "Output ZIP file: $zipFileName"

          New-Item -ItemType Directory -Force -Path $releaseDir

          Write-Host "Copying executable and DLLs from $buildBinDir to $releaseDir"
          Copy-Item -Path "$buildBinDir/*" -Destination $releaseDir -Recurse -Force

          Write-Host "Copying plugins from $pluginsDir to $releaseDir/plugins"
          New-Item -ItemType Directory -Force -Path "$releaseDir/plugins"
          Copy-Item -Path "$pluginsDir/*" -Destination "$releaseDir/plugins" -Recurse -Force

          Write-Host "Copying LICENSE file to $releaseDir"
          Copy-Item -Path $licenseFile -Destination $releaseDir -Force

          Write-Host "Creating ZIP archive: $zipFileName"
          Compress-Archive -Path "$releaseDir/*" -DestinationPath $zipFileName -Force

          Write-Host "Release package created successfully."
        shell: pwsh

      - name: Upload Release Package Artifact
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: phgit-release-windows-x64-${{ github.ref_name }}
          path: phgit-windows-x64-*.zip