name: Build phgit (Multi-Platform Enhanced)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # ============================================================================
  # LINUX BUILDS - Multiple distributions and architectures
  # ============================================================================
  build-debian-like-linux:
    name: Build Debian-like_linux (${{ matrix.distro }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Ubuntu builds
          - distro: ubuntu
            container: ubuntu:22.04
            arch: amd64
            package_manager: apt
            deps_command: |
              apt-get update && apt-get install -y \
                build-essential \
                cmake \
                libssl-dev \
                pkg-config \
                liblua5.4-dev \
                libcurl4-openssl-dev \
                nlohmann-json3-dev \
                git \
                curl \
                gcc-multilib \
                g++-multilib
          - distro: ubuntu
            container: ubuntu:20.04
            arch: amd64
            package_manager: apt
            deps_command: |
              apt-get update && apt-get install -y \
                build-essential \
                cmake \
                libssl-dev \
                pkg-config \
                liblua5.3-dev \
                libcurl4-openssl-dev \
                nlohmann-json3-dev \
                git \
                curl \
                gcc-multilib \
                g++-multilib
          # Debian builds
          - distro: debian
            container: debian:bullseye
            arch: amd64
            package_manager: apt
            deps_command: |
              apt-get update && apt-get install -y \
                build-essential \
                cmake \
                libssl-dev \
                pkg-config \
                liblua5.3-dev \
                libcurl4-openssl-dev \
                nlohmann-json3-dev \
                git \
                curl \
                gcc-multilib \
                g++-multilib
          - distro: debian
            container: debian:bookworm
            arch: amd64
            package_manager: apt
            deps_command: |
              apt-get update && apt-get install -y \
                build-essential \
                cmake \
                libssl-dev \
                pkg-config \
                liblua5.4-dev \
                libcurl4-openssl-dev \
                nlohmann-json3-dev \
                git \
                curl \
                gcc-multilib \
                g++-multilib

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.distro }}-${{ matrix.arch }})
        run: ${{ matrix.deps_command }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ matrix.distro }}-${{ matrix.arch }}

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-debian-like_linux-${{ matrix.distro }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-debian-like_linux-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  build-redhat-like-linux:
    name: Build RedHat-like_linux (${{ matrix.distro }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Fedora builds
          - distro: fedora
            container: fedora:38
            arch: x86_64
            package_manager: dnf
            deps_command: |
              dnf -y update
              dnf install -y \
                gcc-c++ \
                make \
                cmake \
                pkgconf-pkg-config \
                lua-devel \
                libcurl-devel \
                openssl-devel \
                nlohmann-json-devel \
                binutils \
                git \
                tar \
                gzip \
                which \
                curl \
                glibc-devel.i686 \
                libgcc.i686
              dnf clean all
          - distro: fedora
            container: fedora:39
            arch: x86_64
            package_manager: dnf
            deps_command: |
              dnf -y update
              dnf install -y \
                gcc-c++ \
                make \
                cmake \
                pkgconf-pkg-config \
                lua-devel \
                libcurl-devel \
                openssl-devel \
                nlohmann-json-devel \
                binutils \
                git \
                tar \
                gzip \
                which \
                curl \
                glibc-devel.i686 \
                libgcc.i686
              dnf clean all
          # CentOS/RHEL builds
          - distro: centos
            container: quay.io/centos/centos:stream9
            arch: x86_64
            package_manager: dnf
            deps_command: |
              dnf -y update
              dnf install -y epel-release
              dnf install -y \
                gcc-c++ \
                make \
                cmake \
                pkgconf-pkg-config \
                lua-devel \
                libcurl-devel \
                openssl-devel \
                git \
                tar \
                gzip \
                which \
                curl \
                wget
              # Install nlohmann-json manually for CentOS
              cd /tmp
              wget https://github.com/nlohmann/json/releases/download/v3.11.2/json.tar.xz
              tar -xf json.tar.xz
              cd json
              cmake -S . -B build -DJSON_BuildTests=OFF
              cmake --build build
              cmake --install build
              dnf clean all

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.distro }}-${{ matrix.arch }})
        run: ${{ matrix.deps_command }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ matrix.distro }}-${{ matrix.arch }}

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-redhat-like_linux-${{ matrix.distro }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-redhat-like_linux-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  build-arch-like-linux:
    name: Build Arch-like_linux (${{ matrix.distro }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Arch Linux builds
          - distro: arch
            container: archlinux:latest
            arch: x86_64
            package_manager: pacman
            deps_command: |
              pacman-key --init
              pacman-key --populate archlinux
              pacman -Syu --noconfirm --needed \
                base-devel \
                cmake \
                lua \
                curl \
                nlohmann-json \
                go \
                rust \
                git \
                pkgconf \
                lib32-gcc-libs \
                multilib-devel
          # Manjaro builds
          - distro: manjaro
            container: manjarolinux/base:latest
            arch: x86_64
            package_manager: pacman
            deps_command: |
              pacman-key --init
              pacman-key --populate archlinux manjaro
              pacman -Syu --noconfirm --needed \
                base-devel \
                cmake \
                lua \
                curl \
                nlohmann-json \
                go \
                rust \
                git \
                pkgconf

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.distro }}-${{ matrix.arch }})
        run: ${{ matrix.deps_command }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ matrix.distro }}-${{ matrix.arch }}

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-arch-like_linux-${{ matrix.distro }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-arch-like_linux-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  build-alpine-like-linux:
    name: Build Alpine-like_linux (${{ matrix.distro }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # Alpine builds
          - distro: alpine
            container: alpine:3.18
            arch: x86_64
            package_manager: apk
            deps_command: |
              apk update && apk add --no-cache \
                build-base \
                cmake \
                openssl-dev \
                pkgconfig \
                lua5.4-dev \
                curl-dev \
                nlohmann-json \
                git \
                curl \
                rust \
                cargo \
                tar \
                gzip
          - distro: alpine
            container: alpine:3.19
            arch: x86_64
            package_manager: apk
            deps_command: |
              apk update && apk add --no-cache \
                build-base \
                cmake \
                openssl-dev \
                pkgconfig \
                lua5.4-dev \
                curl-dev \
                nlohmann-json \
                git \
                curl \
                rust \
                cargo \
                tar \
                gzip

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.distro }}-${{ matrix.arch }})
        run: ${{ matrix.deps_command }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ matrix.distro }}-${{ matrix.arch }}

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-alpine-like_linux-${{ matrix.distro }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-alpine-like_linux-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  # MACOS/DARWIN BUILDS - Multiple versions and architectures
  # ============================================================================
  build-darwin:
    name: Build Darwin (${{ matrix.os }}-${{ matrix.arch }})

    strategy:
      fail-fast: false
      matrix:
        include:
          # Intel Macs
          - os: macos-12
            arch: x86_64
            runner: macos-12
          - os: macos-13
            arch: x86_64
            runner: macos-13
          # Apple Silicon Macs
          - os: macos-14
            arch: arm64
            runner: macos-14
          - os: macos-15
            arch: arm64
            runner: macos-15

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Homebrew)
        run: |
          brew update
          brew install cmake pkg-config lua curl nlohmann-json openssl

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-darwin-${{ matrix.arch }}-${{ matrix.os }}

      - name: Configure CMake
        run: |
          export OPENSSL_ROOT_DIR=$(brew --prefix openssl)
          export PKG_CONFIG_PATH="$OPENSSL_ROOT_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-darwin-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/bin/
            build/phgit
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-darwin-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-darwin-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  # WINDOWS BUILDS - Multiple architectures
  # ============================================================================
  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # x64 Windows
          - arch: x64
            triplet: x64-windows
            cmake_arch: x64
            vs_arch: x64
          # x86 Windows
          - arch: x86
            triplet: x86-windows
            cmake_arch: Win32
            vs_arch: Win32
          # ARM64 Windows
          - arch: arm64
            triplet: arm64-windows
            cmake_arch: ARM64
            vs_arch: ARM64

    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      RUSTFLAGS: ""

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      - name: Install Ninja
        run: choco install ninja -y

      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet ${{ matrix.triplet }}
        shell: pwsh

      - name: Setup Rust toolchain
        if: matrix.arch != 'arm64'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Setup Rust toolchain (ARM64)
        if: matrix.arch == 'arm64'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: aarch64-pc-windows-msvc

      - name: Debug vcpkg installed files
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Write-Host "Triplet = ${{ matrix.triplet }}"
          if (Test-Path "${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\share") {
            Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\share" -Recurse -Depth 2 | Select-Object -First 50
          }
          if (Test-Path "${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\bin") {
            Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\bin" -Recurse -Depth 1 | Select-Object -First 50
          }
        shell: pwsh

      - name: Configure CMake
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A ${{ matrix.cmake_arch }} `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\lib\lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      - name: Build Project
        run: cmake --build build --config Release --parallel
        shell: pwsh

      - name: Run tests
        if: matrix.arch != 'arm64'
        run: |
          cd build
          ctest -C Release --output-on-failure
        shell: pwsh
        continue-on-error: true

      - name: Copy Runtime DLLs
        run: |
          $vcpkgBinDir = "${{ env.VCPKG_ROOT }}\installed\${{ matrix.triplet }}\bin"
          $targetBinDir = "build\bin\Release"

          Write-Host "Copying DLLs from $vcpkgBinDir to $targetBinDir"

          New-Item -ItemType Directory -Force -Path $targetBinDir

          $dllsToCopy = @(
              "lua.dll",
              "libcurl.dll",
              "libcrypto-3-x64.dll",
              "libssl-3-x64.dll",
              "zlib1.dll"
          )

          # Adjust DLL names for different architectures
          if ("${{ matrix.arch }}" -eq "x86") {
              $dllsToCopy = $dllsToCopy | ForEach-Object { $_ -replace "-x64", "" }
          } elseif ("${{ matrix.arch }}" -eq "arm64") {
              $dllsToCopy = $dllsToCopy | ForEach-Object { $_ -replace "-x64", "-arm64" }
          }

          foreach ($dll in $dllsToCopy) {
              $sourcePath = Join-Path $vcpkgBinDir $dll
              $destinationPath = Join-Path $targetBinDir $dll
              if (Test-Path $sourcePath) {
                  Copy-Item -Path $sourcePath -Destination $destinationPath -Force
                  Write-Host "  Copied $dll"
              } else {
                  Write-Warning "  DLL not found: $sourcePath. This might indicate a missing dependency or an issue with vcpkg installation."
              }
          }
        shell: pwsh

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-windows-${{ matrix.arch }}
          path: |
            build/bin/
            src/plugins/
            LICENSE

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          $releaseDir = "phgit-release"
          $buildBinDir = "build/bin/Release"
          $pluginsDir = "src/plugins"
          $licenseFile = "LICENSE"
          $tagVersion = "${{ github.ref_name }}"
          $zipFileName = "phgit-windows-${{ matrix.arch }}-$tagVersion.zip"

          Write-Host "Preparing release package for version: $tagVersion"
          Write-Host "Output ZIP file: $zipFileName"

          New-Item -ItemType Directory -Force -Path $releaseDir

          Write-Host "Copying executable and DLLs from $buildBinDir to $releaseDir"
          if (Test-Path $buildBinDir) {
            Copy-Item -Path "$buildBinDir/*" -Destination $releaseDir -Recurse -Force
          }

          Write-Host "Copying plugins from $pluginsDir to $releaseDir/plugins"
          New-Item -ItemType Directory -Force -Path "$releaseDir/plugins"
          Copy-Item -Path "$pluginsDir/*" -Destination "$releaseDir/plugins" -Recurse -Force

          Write-Host "Copying LICENSE file to $releaseDir"
          Copy-Item -Path $licenseFile -Destination $releaseDir -Force

          Write-Host "Creating ZIP archive: $zipFileName"
          Compress-Archive -Path "$releaseDir/*" -DestinationPath $zipFileName -Force

          Write-Host "Release package created successfully."
        shell: pwsh

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-windows-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-windows-*.zip

  # ============================================================================
  # BSD BUILDS - FreeBSD, OpenBSD, NetBSD
  # ============================================================================
  build-bsd:
    name: Build BSD (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # FreeBSD
          - os: freebsd
            arch: x86_64
            container: ghcr.io/cross-platform-actions/freebsd:14.1
          - os: freebsd
            arch: x86_64
            container: ghcr.io/cross-platform-actions/freebsd:13.3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build in FreeBSD VM
        if: matrix.os == 'freebsd'
        uses: cross-platform-actions/action@v0.21.0
        with:
          operating_system: freebsd
          version: '14.1'
          shell: bash
          run: |
            sudo pkg update
            sudo pkg install -y cmake pkgconf lua54 curl nlohmann-json openssl git rust
            export CC=clang
            export CXX=clang++
            cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5
            cmake --build build --parallel
            
            # Run tests if available
            if [ -f build/CTestTestfile.cmake ]; then
              (cd build && ctest --output-on-failure)
            else
              echo "No tests configured (CTestTestfile.cmake not found)."
            fi
            
            # Create release package for tags
            if [[ "${{ github.ref }}" == refs/tags/* ]]; then
              mkdir -p phgit-release
              cp -r build/bin/* phgit-release/ 2>/dev/null || true
              cp -r build/phgit phgit-release/ 2>/dev/null || true
              mkdir -p phgit-release/plugins
              cp -r src/plugins/* phgit-release/plugins/
              cp LICENSE phgit-release/
              tar -czf phgit-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/
            fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  # SOLARIS/ILLUMOS BUILDS
  # ============================================================================
  build-solaris:
    name: Build Solaris (${{ matrix.os }}-${{ matrix.arch }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # OpenIndiana (Illumos)
          - os: openindiana
            arch: x86_64
            container: openindiana/oi-hipster:2023.10

    container:
      image: ${{ matrix.container }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install system dependencies (${{ matrix.os }}-${{ matrix.arch }})
        run: |
          pkg update
          pkg install gcc-13 cmake pkg-config lua curl nlohmann-json openssl git
          export CC=gcc-13
          export CXX=g++-13

      - name: Setup Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source ~/.cargo/env
          rustup default stable

      - name: Configure CMake
        run: |
          source ~/.cargo/env
          export CC=gcc-13
          export CXX=g++-13
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: Compile Project
        run: |
          source ~/.cargo/env
          cmake --build build --parallel

      - name: Run unit tests
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "No tests configured (CTestTestfile.cmake not found)."
          fi

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz

  # ============================================================================
  # CROSS-COMPILATION BUILDS - Additional architectures
  # ============================================================================
  build-cross-compile:
    name: Build CrossCompile (${{ matrix.target }})
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          # ARM64 Linux
          - target: aarch64-unknown-linux-gnu
            arch: arm64
            os: linux
            cross_target: aarch64-linux-gnu
            deps_packages: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          # ARM Linux
          - target: armv7-unknown-linux-gnueabihf
            arch: arm
            os: linux
            cross_target: arm-linux-gnueabihf
            deps_packages: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
          # RISC-V 64
          - target: riscv64gc-unknown-linux-gnu
            arch: riscv64
            os: linux
            cross_target: riscv64-linux-gnu
            deps_packages: gcc-riscv64-linux-gnu g++-riscv64-linux-gnu
          # PowerPC 64
          - target: powerpc64le-unknown-linux-gnu
            arch: ppc64le
            os: linux
            cross_target: powerpc64le-linux-gnu
            deps_packages: gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
          # S390X
          - target: s390x-unknown-linux-gnu
            arch: s390x
            os: linux
            cross_target: s390x-linux-gnu
            deps_packages: gcc-s390x-linux-gnu g++-s390x-linux-gnu
          # MIPS 64
          - target: mips64el-unknown-linux-gnuabi64
            arch: mips64el
            os: linux
            cross_target: mips64el-linux-gnuabi64
            deps_packages: gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ${{ matrix.deps_packages }} \
            cmake \
            pkg-config \
            git \
            curl \
            build-essential

      - name: Setup Rust with target
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-cross-${{ matrix.target }}

      - name: Install cross-compilation dependencies
        run: |
          # Create sysroot directory structure
          sudo mkdir -p /usr/${{ matrix.cross_target }}/include
          sudo mkdir -p /usr/${{ matrix.cross_target }}/lib
          
          # Note: For a real cross-compilation setup, you would need to install
          # target-specific libraries. This is a simplified setup.
          echo "Cross-compilation setup for ${{ matrix.target }}"

      - name: Configure CMake for cross-compilation
        run: |
          export PKG_CONFIG_PATH="/usr/${{ matrix.cross_target }}/lib/pkgconfig"
          export CC="${{ matrix.cross_target }}-gcc"
          export CXX="${{ matrix.cross_target }}-g++"
          export AR="${{ matrix.cross_target }}-ar"
          export STRIP="${{ matrix.cross_target }}-strip"
          
          # Create a simple CMake toolchain file
          cat > cross-toolchain.cmake << EOF
          set(CMAKE_SYSTEM_NAME Linux)
          set(CMAKE_SYSTEM_PROCESSOR ${{ matrix.arch }})
          set(CMAKE_C_COMPILER ${{ matrix.cross_target }}-gcc)
          set(CMAKE_CXX_COMPILER ${{ matrix.cross_target }}-g++)
          set(CMAKE_FIND_ROOT_PATH /usr/${{ matrix.cross_target }})
          set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
          set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
          set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
          EOF
          
          cmake -S . -B build \
            -DCMAKE_TOOLCHAIN_FILE=cross-toolchain.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        continue-on-error: true

      - name: Compile Project
        run: cmake --build build --parallel
        continue-on-error: true

      - name: Upload Build Artifacts (CI builds)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: BuildArtifacts-crosscompile-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            build/
            src/plugins/
            LICENSE
          retention-days: 3
        continue-on-error: true

      - name: Create Release Package
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          mkdir -p phgit-release
          cp -r build/bin/* phgit-release/ 2>/dev/null || true
          cp -r build/phgit phgit-release/ 2>/dev/null || true
          mkdir -p phgit-release/plugins
          cp -r src/plugins/* phgit-release/plugins/
          cp LICENSE phgit-release/
          tar -czf phgit-crosscompile-${{ matrix.arch }}-${{ github.ref_name }}.tar.gz phgit-release/
        continue-on-error: true

      - name: Upload Release Artifacts (Tagged builds)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: Release-crosscompile-${{ matrix.os }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: phgit-*.tar.gz
        continue-on-error: true

  # ============================================================================
  # BUILD STATUS SUMMARY - For CI badge
  # ============================================================================
  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [
      build-debian-like-linux,
      build-redhat-like-linux,
      build-arch-like-linux,
      build-alpine-like-linux,
      build-darwin,
      build-windows,
      build-bsd,
      build-solaris,
      build-cross-compile
    ]
    if: always()

    steps:
      - name: Check build results
        run: |
          echo "## Build Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Debian-like Linux | ${{ needs.build-debian-like-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| RedHat-like Linux | ${{ needs.build-redhat-like-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Arch-like Linux | ${{ needs.build-arch-like-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Alpine-like Linux | ${{ needs.build-alpine-like-linux.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Darwin/macOS | ${{ needs.build-darwin.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Windows | ${{ needs.build-windows.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| BSD | ${{ needs.build-bsd.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Solaris | ${{ needs.build-solaris.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Cross-Compile | ${{ needs.build-cross-compile.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Set overall status
          if [[ "${{ needs.build-debian-like-linux.result }}" == "success" && \
                "${{ needs.build-redhat-like-linux.result }}" == "success" && \
                "${{ needs.build-arch-like-linux.result }}" == "success" && \
                "${{ needs.build-alpine-like-linux.result }}" == "success" && \
                "${{ needs.build-darwin.result }}" == "success" && \
                "${{ needs.build-windows.result }}" == "success" ]]; then
            echo "✅ Core builds successful"
            exit 0
          else
            echo "❌ Some core builds failed"
            exit 1
          fi

  # ============================================================================
  # RELEASE CONSOLIDATION - Only for tagged builds
  # ============================================================================
  consolidate-release:
    name: Consolidate Release Assets
    runs-on: ubuntu-latest
    needs: [
      build-debian-like-linux,
      build-redhat-like-linux,
      build-arch-like-linux,
      build-alpine-like-linux,
      build-darwin,
      build-windows,
      build-bsd,
      build-solaris,
      build-cross-compile
    ]
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Download all release artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: Release-*
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "## Release Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ls -la
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### File List:" >> $GITHUB_STEP_SUMMARY
          for file in phgit-*; do
            if [ -f "$file" ]; then
              size=$(ls -lh "$file" | awk '{print $5}')
              echo "- \`$file\` ($size)" >> $GITHUB_STEP_SUMMARY
            fi
          done

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            phgit-*.tar.gz
            phgit-*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
          name: "phgit ${{ github.ref_name }}"
          body: |
            # phgit ${{ github.ref_name }}
            
            Multi-platform release with support for:
            
            ## Linux Distributions
            - **Debian-like**: Ubuntu, Debian (multiple versions)
            - **RedHat-like**: Fedora, CentOS/RHEL
            - **Arch-like**: Arch Linux, Manjaro
            - **Alpine-like**: Alpine Linux (musl-based)
            
            ## Other Operating Systems
            - **Darwin**: macOS (Intel x86_64 and Apple Silicon ARM64)
            - **Windows**: x86, x64, ARM64
            - **BSD**: FreeBSD
            - **Solaris**: OpenIndiana (Illumos)
            
            ## Cross-compiled Architectures
            - ARM64, ARMv7, RISC-V 64, PowerPC 64LE, S390X, MIPS64EL
            
            Download the appropriate package for your platform and architecture.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
