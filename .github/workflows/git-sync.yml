#
# Copyright (C) 2025 Pedro Henrique / phkaiser13
#
# File: git-sync.yml
#
# This workflow implements the Git-aware synchronization and drift detection
# mechanism. It periodically runs the 'git_sync' Rust module to compare the
# live state of the Kubernetes cluster against the desired state defined in
# the Git repository.
#
# Architecture:
# - Triggered on a schedule (e.g., every 30 minutes) and can also be run manually.
# - Checks out the repository to access both the manifests and the sync tool.
# - Builds and executes the 'git_sync' Rust module.
# - Provides the module with the necessary credentials (for both Kubernetes and
#   GitHub) to perform its tasks.
# - If drift is detected, the module has permissions to create a new branch and
#   open a pull request with the required changes for reconciliation.
#
# SPDX-License-Identifier: Apache-2.0
#

name: "️🔄 GitOps Drift Detection & Sync"

on:
  # Allows manual triggering of the workflow from the GitHub Actions UI.
  workflow_dispatch:

  # Schedules the workflow to run automatically at fixed intervals.
  # This cron expression means "at minute 30 past every hour".
  schedule:
    - cron: '30 * * * *'

jobs:
  detect_drift:
    name: "🔍 Detect Cluster Drift"
    runs-on: ubuntu-latest
    permissions:
      # 'contents: write' is required for the action to create a new branch and
      # push the reconciliation commits.
      contents: write
      # 'pull-requests: write' is required to create a pull request with the
      # detected drift.
      pull-requests: write

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          # The GITHUB_TOKEN is used to grant push access to the repository
          # for creating the reconciliation PR.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: "Install Rust toolchain"
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: "Build git_sync module"
        run: cargo build --release -p git_sync

      # The git_sync module requires git to be configured with a user name
      # and email to be able to create commits.
      - name: "Configure Git user"
        run: |
          git config user.name "PeitchGIT Sync Bot"
          git config user.email "bot@peitchgit.local"

      - name: "Run Drift Detection"
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBE_CONFIG_DATA }}
          # The GITHUB_TOKEN is passed to the module so it can authenticate with
          # the GitHub API to create a pull request.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MODULE_CONFIG_JSON: ${{ toJson(
            {
            "repo_url": github.repositoryUrl,
            "branch": "main",
            "manifest_path": "./k8s/manifests", # Assumed path to manifests
            "dry_run": false,
            "create_pr": true
          }
          )}}
        run: |
          echo "Decoding Kubeconfig..."
          KUBECONFIG_FILE=$(mktemp)
          echo "$KUBECONFIG_BASE64" | base64 --decode > "$KUBECONFIG_FILE"
          export KUBECONFIG="$KUBECONFIG_FILE"

          echo "Executing git_sync module..."
          ./target/release/phgit_git_sync

          rm "$KUBECONFIG_FILE"