name: Build and Package Windows Installer

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      VCPKG_INSTALL_LIST: "curl lua nlohmann-json"
      CMAKE_VERSION: "3.29.3"
      RUST_TOOLCHAIN: "stable"
      ARTIFACT_NAME: "windows-installer"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: ${{ env.CMAKE_VERSION }}

      - name: Install Ninja
        shell: pwsh
        run: |
          choco install ninja -y

      - name: Export VCPKG_ROOT to environment
        shell: pwsh
        run: |
          $val = "${{ github.workspace }}\vcpkg"
          Add-Content -Path $env:GITHUB_ENV -Value "VCPKG_ROOT=$val"
          Write-Host "VCPKG_ROOT set to $val"

      - name: Install vcpkg and libraries (robusto)
        shell: pwsh
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ env.VCPKG_DEFAULT_TRIPLET }}
          VCPKG_INSTALL_LIST: ${{ env.VCPKG_INSTALL_LIST }}
          # desativa métricas do vcpkg para o processo
          VCPKG_DISABLE_METRICS: "1"
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Using VCPKG_ROOT = $env:VCPKG_ROOT"
          if (!(Test-Path -Path $env:VCPKG_ROOT)) {
            git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          } else {
            Write-Host "vcpkg already present"
          }
          Push-Location $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg.exe install $env:VCPKG_INSTALL_LIST --triplet $env:VCPKG_DEFAULT_TRIPLET
          Pop-Location

      - name: Check for Cargo.toml (set output)
        id: check_cargo
        shell: pwsh
        run: |
          if (Test-Path -Path "Cargo.toml") {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_cargo=true"
            Write-Host "Cargo.toml found"
          } else {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "has_cargo=false"
            Write-Host "Cargo.toml not found"
          }

      - name: Setup Rust toolchain (only if repo has Cargo.toml)
        if: ${{ steps.check_cargo.outputs.has_cargo == 'true' }}
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Install NSIS (makensis) and export path
        id: find_makensis
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          choco install nsis --yes --no-progress
          $makensisPath = $null
          try {
            $cmd = Get-Command makensis -ErrorAction Stop
            $makensisPath = $cmd.Path
            Write-Host "makensis found at: $makensisPath"
          } catch {
            $fallback = "C:\ProgramData\chocolatey\bin\makensis.exe"
            if (Test-Path -Path $fallback) {
              $makensisPath = $fallback
              Write-Host "makensis fallback found at $fallback"
            } else {
              Write-Host "makensis not found; printing PATH for debug"
              $env:Path.Split(";") | ForEach-Object { Write-Host $_ }
              throw "makensis not found after choco install"
            }
          }
          $makensisDir = Split-Path -Path $makensisPath -Parent
          Add-Content -Path $env:GITHUB_OUTPUT -Value "makensis_path=$makensisPath"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "makensis_dir=$makensisDir"

      - name: Configure CMake (MSVC / Visual Studio) - robust
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ github.workspace }}\vcpkg
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "CMake version:"
          cmake --version
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          # configure - pass explicit MAKENSIS and NSIS_DIR variables
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="$env:VCPKG_ROOT\installed\x64-windows\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="$env:VCPKG_ROOT\installed\x64-windows\include" `
            -DLUA_LIBRARIES="$env:VCPKG_ROOT\installed\x64-windows\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release `
            -DMAKENSIS_EXECUTABLE="${{ steps.find_makensis.outputs.makensis_path }}" `
            -DNSIS_DIR="${{ steps.find_makensis.outputs.makensis_dir }}"

      - name: Show generated CMake targets (debug)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "CMake help targets:"
          cmake --build build --target help

      - name: Build and Package (tries package-windows; fallback)
        id: do_build
        shell: pwsh
        env:
          MAKENSIS_PATH: ${{ steps.find_makensis.outputs.makensis_path }}
        run: |
          $ErrorActionPreference = 'Stop'
          $buildDir = Join-Path $PWD "build"
          # procura o projeto package-windows.vcxproj
          $proj = Get-ChildItem -Path $buildDir -Recurse -Filter "package-windows.vcxproj" -ErrorAction SilentlyContinue | Select-Object -First 1
          if ($proj) {
            Write-Host "Found package-windows project: $($proj.FullName)"
            cmake --build $buildDir --config Release --target package-windows --parallel
          } else {
            Write-Host "package-windows target not found. Tentando alternativas..."
            cmake --build $buildDir --target help
            $alt = Get-ChildItem -Path $buildDir -Recurse -Include "*installer_helper*.vcxproj","*installer*.vcxproj" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($alt) {
              Write-Host "Found alternative project: $($alt.FullName). Building ALL_BUILD first."
              cmake --build $buildDir --config Release --target ALL_BUILD --parallel
            } else {
              $nsi = Get-ChildItem -Path $buildDir -Recurse -Filter "*.nsi" -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($nsi) {
                Write-Host "Found .nsi file at $($nsi.FullName) — compiling with makensis"
                & "${env:MAKENSIS_PATH}" $nsi.FullName
              } else {
                throw "package-windows não encontrado e nenhuma alternativa (.vcxproj/.nsi) foi localizada."
              }
            }
          }

          # coleta artefatos .exe para logs (não usado diretamente pelo upload que usa glob)
          $candidates = Get-ChildItem -Path $buildDir -Recurse -Include "*.exe" -ErrorAction SilentlyContinue | Where-Object { $_.Length -gt 0 } | Sort-Object LastWriteTime -Descending
          if ($candidates) {
            Write-Host "Executáveis encontrados:"
            $candidates | ForEach-Object { Write-Host $_.FullName }
            $list = ($candidates | ForEach-Object { $_.FullName }) -join "`n"
            Add-Content -Path $env:GITHUB_OUTPUT -Value "artifact_paths=$list"
          } else {
            Add-Content -Path $env:GITHUB_OUTPUT -Value "artifact_paths="
            Write-Host "Nenhum .exe encontrado no build."
          }

      - name: Upload Installer Artifact (glob build/**/*.exe)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: |
            build/**/*.exe
            **/*.exe
          retention-days: 7
