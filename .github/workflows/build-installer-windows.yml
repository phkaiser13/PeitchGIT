name: Build and Package Windows Installer

on:
  push:
    branches: [ "main" ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  VCPKG_DEFAULT_TRIPLET: x64-windows
  BUILD_DIR: build
  VS_GENERATOR: "Visual Studio 17 2022"
  VS_ARCH: x64
  CHOCO_BIN: "C:/ProgramData/chocolatey/bin"

jobs:
  build-windows-installer:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      BUILD_DIR: ${{ env.BUILD_DIR }}
      VS_GENERATOR: ${{ env.VS_GENERATOR }}
      VS_ARCH: ${{ env.VS_ARCH }}
      CHOCO_BIN: ${{ env.CHOCO_BIN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Quick context
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE = $env:GITHUB_WORKSPACE"
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Write-Host "BUILD_DIR = $env:BUILD_DIR"

      - name: Ensure Chocolatey packages (ninja, nsis)
        shell: pwsh
        run: |
          choco feature enable -n=allowGlobalConfirmation | Out-Null
          choco install ninja --yes --no-progress
          choco install nsis --yes --no-progress
          Get-Command makensis -ErrorAction SilentlyContinue | ForEach-Object { Write-Host "makensis => $($_.Source)" }

      - name: Setup CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      - name: Cache vcpkg (downloads/installed/buildtrees)
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}\vcpkg\downloads
            ${{ github.workspace }}\vcpkg\installed
            ${{ github.workspace }}\vcpkg\buildtrees
          key: vcpkg-${{ runner.os }}-${{ github.sha }}
          restore-keys: vcpkg-${{ runner.os }}-

      - name: Install vcpkg + libs
        shell: pwsh
        run: |
          if (-not (Test-Path $env:VCPKG_ROOT)) {
            git clone --depth 1 https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          } else {
            Write-Host "vcpkg já existe"
          }
          Push-Location $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat -disableMetrics
          .\vcpkg.exe install curl lua nlohmann-json --triplet $env:VCPKG_DEFAULT_TRIPLET
          Pop-Location

      - name: Show repo & installer files (debug)
        shell: pwsh
        run: |
          Write-Host "Top-level files:"
          Get-ChildItem -File -Force | Select-Object -First 100 | ForEach-Object { Write-Host $_.Name }
          if (Test-Path installer) { Write-Host "Installer folder exists"; Get-ChildItem installer -Recurse | Select-Object -First 100 | ForEach-Object { Write-Host $_.FullName } }

      - name: Configure CMake (with NSIS / VCPKG hints)
        shell: pwsh
        env:
          VCPKG_ROOT: ${{ env.VCPKG_ROOT }}
        run: |
          $makensis = (Get-Command makensis -ErrorAction SilentlyContinue).Source
          if (-not $makensis) { $makensis = "${{ env.CHOCO_BIN }}\makensis.exe"; Write-Host "makensis fallback: $makensis" }
          else { Write-Host "makensis found: $makensis" }
          $nsis_dir = Split-Path $makensis -Parent

          cmake -S . -B $env:BUILD_DIR -G "$env:VS_GENERATOR" -A $env:VS_ARCH `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="$env:VCPKG_ROOT\installed\$env:VCPKG_DEFAULT_TRIPLET\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="$env:VCPKG_ROOT\installed\$env:VCPKG_DEFAULT_TRIPLET\include" `
            -DLUA_LIBRARIES="$env:VCPKG_ROOT\installed\$env:VCPKG_DEFAULT_TRIPLET\lib\lua.lib" `
            -DMAKENSIS_EXECUTABLE="$makensis" `
            -DNSIS_DIR="$nsis_dir" `
            -DCPACK_GENERATOR=NSIS `
            -DCMAKE_BUILD_TYPE=Release

          Write-Host "—— cmake configure finished, printing brief CMakeCache and targets"
          if (Test-Path "$env:BUILD_DIR\CMakeCache.txt") { Get-Content "$env:BUILD_DIR\CMakeCache.txt" -TotalCount 200 | Select-String -Pattern "MAKENSIS|NSIS|CPACK" -SimpleMatch }
          cmake --build $env:BUILD_DIR --config Release --target help | Select-Object -First 200 | ForEach-Object { Write-Host $_ }

      - name: Build (compile)
        shell: pwsh
        run: |
          cmake --build $env:BUILD_DIR --config Release --parallel

      - name: Try CPack (NSIS) to generate installer
        shell: pwsh
        run: |
          Push-Location $env:BUILD_DIR
          Write-Host "Running cpack -G NSIS -C Release"
          if (Test-Path (Join-Path $env:BUILD_DIR "CPackConfig.cmake")) {
            cpack -G NSIS -C Release -V
            $cpackExit = $LASTEXITCODE
            Write-Host "cpack exit: $cpackExit"
          } else {
            Write-Host "CPackConfig.cmake not found in build dir; skipping direct cpack"
            $cpackExit = 1
          }
          Pop-Location
          if ($cpackExit -eq 0) { Write-Host "CPack created installer successfully."; exit 0 }
          else { Write-Host "CPack failed or not applicable; will fallback to search .nsi and makensis" }

      - name: Fallback — search .nsi and run makensis manually
        shell: pwsh
        run: |
          Write-Host "Procurando arquivos .nsi no repositório e build"
          $nsi = Get-ChildItem -Path . -Include *.nsi -Recurse -File -ErrorAction SilentlyContinue | Sort-Object Length -Descending | Select-Object -First 1
          if (-not $nsi) {
            Write-Host "Nenhum .nsi encontrado via busca genérica. Tentando caminho conhecido installer/windows/installer.nsi"
            if (Test-Path "installer/windows/installer.nsi") {
              $nsi = Get-Item "installer/windows/installer.nsi"
            }
          }
          if (-not $nsi) { Write-Error "Sem .nsi para processar — não foi possível criar instalador"; exit 1 }
          Write-Host "Usando .nsi: $($nsi.FullName)"
          $makensis = (Get-Command makensis -ErrorAction SilentlyContinue).Source
          if (-not $makensis) { $makensis = "${{ env.CHOCO_BIN }}\makensis.exe"; Write-Host "makensis fallback: $makensis" }
          Write-Host "Executando makensis $($nsi.FullName)"
          & $makensis "/V2" $nsi.FullName
          if ($LASTEXITCODE -ne 0) { Write-Error "makensis retornou $LASTEXITCODE"; exit $LASTEXITCODE } else { Write-Host "makensis finalizou OK" }

      - name: Collect and upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: |
            build/**/*.exe
            installer/**/*.exe
            **/*.exe
          retention-days: 7

      - name: Final debug info (list build tree top files)
        if: always()
        shell: pwsh
        run: |
          Write-Host "Top artifacts in build/"
          if (Test-Path build) { Get-ChildItem build -Recurse -File | Sort-Object Length -Descending | Select-Object -First 30 | ForEach-Object { Write-Host "$($_.FullName) ($($_.Length) bytes)" } }
          else { Write-Host "build/ not present" }
