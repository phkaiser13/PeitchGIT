# Copyright (C) 2025 Pedro Henrique / phkaiser13
# SPDX-License-Identifier: Apache-2.0

name: Build, Package, and Release

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  # O gatilho principal para a criação de releases
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-and-package:
    name: Build on ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    
    # A matriz de build para cobrir todas as nossas plataformas alvo
    strategy:
      matrix:
        include:
          - name: Windows
            os: windows-latest
            artifact_glob: "phgit-installer-*.exe"
            asset_name_suffix: "windows-x64.exe"
          - name: Linux
            os: ubuntu-latest
            artifact_glob: "phgit-installer-*.deb" # CPack pode gerar DEB e RPM, vamos focar no DEB para o artefato principal
            asset_name_suffix: "linux-amd64.deb"
          - name: macOS
            os: macos-latest
            artifact_glob: "phgit-installer-*.dmg"
            asset_name_suffix: "macos-universal.dmg"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- Instalação de Dependências Específica da Plataforma ---

      - name: Install Dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build libcurl4-openssl-dev

      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja curl

      - name: Install Dependencies (Windows)
        if: runner.os == 'Windows'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '1b47e02435323c1c7c37196994f234503d376d1b' # Use a specific commit for reproducibility
          vcpkgArguments: 'curl nlohmann-json spdlog' # spdlog is small, better to get it here
          vcpkgTriplet: 'x64-windows-static' # Static linking for a more portable .exe

      - name: Install NSIS (Windows only)
        if: runner.os == 'Windows'
        run: choco install nsis -y --no-progress

      # --- Configuração e Build com CMake ---

      - name: Configure CMake
        id: configure_cmake
        run: |
          # Define a variável de toolchain do vcpkg apenas para Windows
          VCPKG_TOOLCHAIN_ARGS=""
          if [ "${{ runner.os }}" == "Windows" ]; then
            VCPKG_TOOLCHAIN_ARGS="-DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
          fi
          
          cmake -S ./installer -B build -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release \
            $VCPKG_TOOLCHAIN_ARGS
        shell: bash

      - name: Build with CMake
        run: cmake --build build --config Release --parallel

      - name: Package with CPack
        run: |
          cd build
          cpack -C Release --verbose
      
      # --- Upload de Artefatos e Criação de Release ---

      - name: Find and prepare artifact for upload
        id: find_artifact
        run: |
          # Encontra o artefato gerado pelo CPack
          ARTIFACT_PATH=$(find build -name "${{ matrix.artifact_glob }}" | head -n 1)
          echo "Found artifact: $ARTIFACT_PATH"
          
          # Define o nome final do ativo para a release
          FINAL_ASSET_NAME="phgit-installer-${{ matrix.asset_name_suffix }}"
          echo "Final asset name: $FINAL_ASSET_NAME"
          
          # Renomeia para um nome consistente e define os outputs
          mv "$ARTIFACT_PATH" "$FINAL_ASSET_NAME"
          echo "artifact_path=$FINAL_ASSET_NAME" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer-${{ matrix.name }}
          path: ${{ steps.find_artifact.outputs.artifact_path }}
          retention-days: 7

      - name: Upload Asset to GitHub Release
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./${{ steps.find_artifact.outputs.artifact_path }}
          asset_name: ${{ steps.find_artifact.outputs.artifact_path }}
          asset_content_type: application/octet-stream
