# Copyright (C) 2025 Pedro Henrique / phkaiser13
# arch_ci.yml - Workflow de CI para o projeto gitph em distros Arch-like.
#
# Este workflow automatiza o build e release para múltiplas arquiteturas
# em um ambiente baseado em Arch Linux.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release Multi-Arch (Arch)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  # Job de build para múltiplas arquiteturas em ambiente Arch Linux
  build-arch:
    name: Build para ${{ matrix.arch }} (Arch)
    runs-on: ubuntu-latest
    strategy:
      # Matriz para as arquiteturas que o Arch Linux suporta oficialmente
      matrix:
        include:
          - arch: x86_64
            platform: linux/amd64
          - arch: aarch64
            platform: linux/arm64

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o QEMU para emulação de arquitetura
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Compila o projeto dentro de um contêiner Docker do Arch Linux
      - name: Build dentro do contêiner Docker (Arch)
        run: |
          docker run --rm --platform ${{ matrix.platform }} \
            -v "${{ github.workspace }}":/work -w /work \
            archlinux:latest \
            /bin/bash -c '
              set -e
              echo "Iniciando build para ${{ matrix.platform }} em ambiente Arch Linux"

              # Atualiza os repositórios e a chave de assinatura do Arch
              pacman-key --init
              pacman-key --populate archlinux
              pacman -Syu --noconfirm

              # Instala dependências usando pacman
              # O grupo "base-devel" contém tudo o que é necessário para compilar (gcc, make, pkg-config, etc.)
              pacman -S --noconfirm --needed \
                base-devel \
                cmake \
                lua \
                curl \
                nlohmann-json \
                git

              # Configura e compila o projeto
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
              cmake --build build --parallel

              echo "Build em Arch Linux concluído com sucesso!"
            '
      
      # 4. Salva os artefatos de build com um nome único para o Arch
      - name: Upload dos artefatos de build (${{ matrix.arch }})
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-arch-${{ matrix.arch }}
          path: |
            build/bin/
            src/plugins/
            LICENSE

  # Job de release que cria os pacotes a partir dos builds do Arch
  release-arch:
    name: Criar Release (Arch)
    needs: build-arch # Depende do sucesso dos builds do Arch
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Baixa os artefatos compilados pelo job de build do Arch
      - name: Download dos artefatos de build (Arch)
        uses: actions/download-artifact@v4
        with:
          pattern: gitph-build-artifacts-arch-*
          path: artifacts/

      # 3. Empacota os arquivos para cada arquitetura
      - name: Empacotar para Release (Arch)
        run: |
          set -e
          VERSION=${{ github.ref_name }}
          mkdir -p release_packages

          # Itera sobre cada diretório de artefato do Arch
          for ARTIFACT_DIR in artifacts/gitph-build-artifacts-arch-*/; do
            ARCH=$(basename "$ARTIFACT_DIR" | sed 's/gitph-build-artifacts-arch-//')
            
            # Define o nome do pacote final, indicando que é para Arch Linux
            RELEASE_NAME="gitph-${VERSION}-archlinux-${ARCH}"
            PACKAGE_DIR="release_packages/${RELEASE_NAME}"
            
            echo "Empacotando para a arquitetura: ${ARCH} (Arch)"

            # Cria a estrutura de diretórios
            mkdir -p "${PACKAGE_DIR}/modules"
            
            # Copia os arquivos
            cp -r "${ARTIFACT_DIR}/bin/"* "${PACKAGE_DIR}/"
            if [ -d "${ARTIFACT_DIR}/plugins" ] && [ "$(ls -A ${ARTIFACT_DIR}/plugins)" ]; then
              cp -r "${ARTIFACT_DIR}/plugins/"* "${PACKAGE_DIR}/modules/"
            fi
            cp "${ARTIFACT_DIR}/LICENSE" "${PACKAGE_DIR}/"
            
            # Remove símbolos de debug
            strip --strip-unneeded "${PACKAGE_DIR}/gitph"
            find "${PACKAGE_DIR}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} + 2>/dev/null || true

            # Cria o arquivo .tar.gz
            (cd release_packages && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          done

      # 4. Publica a Release no GitHub com os pacotes do Arch
      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: release_packages/*.tar.gz
          generate_release_notes: true
