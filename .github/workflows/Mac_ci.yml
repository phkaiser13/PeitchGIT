# Copyright (C) 2025 Pedro Henrique / phkaiser13
# main_ci_macos.yml - Workflow de Integração Contínua para macOS
#
# Este workflow automatiza o build e release da aplicação no macOS.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (macOS)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste no macOS
    runs-on: macos-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # Instalar dependências via Homebrew
      - name: Instalar dependências do sistema
        run: |
          brew update
          brew install cmake pkg-config lua curl nlohmann-json

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # Configura e compila o projeto usando CMake (Release)
      - name: Configurar CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Compilar Projeto
        run: cmake --build build --parallel

      # Upload dos artefatos compilados
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts
          path: |
            build/bin/
            src/plugins/
            LICENSE

  release:
    name: Criar Release no macOS
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts
          path: artifacts/

      - name: Empacotar para Release
        run: |
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)"

          mkdir -p "release/${RELEASE_NAME}/modules"

          cp -r artifacts/bin/* "release/${RELEASE_NAME}/"
          cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/"
          cp artifacts/LICENSE "release/${RELEASE_NAME}/"

          echo "Removendo símbolos de debug..."
          strip --strip-unneeded "release/${RELEASE_NAME}/gitph"
          find "release/${RELEASE_NAME}/modules" -type f -name "*.dylib" -exec strip --strip-unneeded {} +

          echo "Criando o pacote .tar.gz..."
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")

          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
