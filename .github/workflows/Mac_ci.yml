# Copyright (C) 2025 Pedro Henrique / phkaiser13
# main_ci_macos.yml - Workflow de Integração Contínua para macOS (Intel e Apple Silicon)
#
# Este workflow automatiza o processo de build e release da aplicação no macOS.
# Ele garante que o projeto compila corretamente em um ambiente limpo
# e cria pacotes de distribuição automaticamente quando uma nova versão é marcada.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (macOS)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (macOS)
    runs-on: macos-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      # --- CORREÇÃO 1: Adicionado nlohmann-json à lista ---
      - name: Instalar Homebrew e dependências do sistema
        run: |
          brew update
          brew install cmake pkg-config lua openssl curl rust go nlohmann-json

      - name: Configurar ambiente Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configurar ambiente Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # --- CORREÇÃO 2: Instruindo o CMake sobre onde encontrar as bibliotecas ---
      # Esta é a parte mais importante. Ela diz ao CMake para olhar nos diretórios do
      # Homebrew para encontrar lua, curl e nlohmann-json.
      - name: Configurar CMake
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH="$(brew --prefix lua);$(brew --prefix curl);$(brew --prefix nlohmann-json)" \
            -DCMAKE_OSX_ARCHITECTURES="$(uname -m)"

      - name: Compilar Projeto
        run: cmake --build build --parallel

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts
          path: |
            build/bin/
            src/plugins/
            LICENSE

  release:
    name: Criar Release (macOS)
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts
          path: artifacts/

      - name: Empacotar para Release
        run: |
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m)"
          
          mkdir -p "release/${RELEASE_NAME}/modules"
          cp -r artifacts/bin/* "release/${RELEASE_NAME}/"
          cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/"
          cp artifacts/LICENSE "release/${RELEASE_NAME}/"

          echo "Removing debug symbols..."
          strip --strip-unneeded "release/${RELEASE_NAME}/gitph" || echo "strip failed (maybe unsupported binary format)"
          find "release/${RELEASE_NAME}/modules" -type f \( -name "*.dylib" -o -name "*.so" \) -exec strip --strip-unneeded {} + || echo "strip failed on modules"

          echo "Creating .tar.gz package..."
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")

          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
