# Copyright (C) 2025 Pedro Henrique / phkaiser13
# main_ci_macos.yml - Workflow de Integração Contínua para macOS
#
# Este workflow é equivalente ao main_ci.yml (Linux) mas adaptado para
# runners macOS. Ele instala dependências via Homebrew, configura Go e
# Rust, compila com CMake e empacota o release.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (macOS)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (macOS)
    runs-on: macos-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Verificar Command Line Tools (Xcode)
        run: |
          echo "Checking for Xcode Command Line Tools..."
          if ! xcode-select -p >/dev/null 2>&1; then
            echo "Xcode Command Line Tools não estão instaladas - em runners do GitHub Actions já costumam vir pré-instaladas."
            exit 1
          else
            echo "Xcode Command Line Tools encontradas em: $(xcode-select -p)"
          fi

      # Instala dependências via Homebrew (equivalente ao apt-get do Linux)
      - name: Instalar dependências do sistema (Homebrew)
        run: |
          echo "Atualizando Homebrew e instalando dependências..."
          brew update
          # CORREÇÃO: Removido '|| true' para garantir que o workflow falhe se a instalação não ocorrer.
          brew install cmake pkg-config lua nlohmann-json curl
          
          echo "Verificando instalações..."
          cmake --version
          pkg-config --version
          lua -v

      # NOVO PASSO: Configurar variáveis de ambiente para que o CMake encontre as bibliotecas do Homebrew.
      # Esta é a correção principal para os erros 'library not found' e 'file not found'.
      - name: Configurar variáveis de ambiente para Homebrew
        run: |
          BREW_PREFIX=$(brew --prefix)
          echo "LDFLAGS=-L${BREW_PREFIX}/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I${BREW_PREFIX}/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=${BREW_PREFIX}/lib/pkgconfig" >> $GITHUB_ENV
          echo "Adicionando variáveis de ambiente:"
          echo "LDFLAGS=-L${BREW_PREFIX}/lib"
          echo "CPPFLAGS=-I${BREW_PREFIX}/include"
          echo "PKG_CONFIG_PATH=${BREW_PREFIX}/lib/pkgconfig"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: Configurar CMake
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          
      - name: Compilar Projeto
        run: |
          cmake --build build --parallel

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-macos
          path: |
            build/bin/
            src/plugins/
            LICENSE

  release:
    name: Criar Release (macOS)
    needs: build
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-macos # Nome do artefato deve corresponder ao do job de build
          path: artifacts/

      - name: Empacotar para Release
        run: |
          set -euo pipefail
          VERSION=${{ github.ref_name }}
          # Normaliza o nome da plataforma (Darwin -> macos)
          OS_NAME=$(uname -s)
          if [ "$OS_NAME" = "Darwin" ]; then
            PLATFORM="macos"
          else
            PLATFORM=$(echo "$OS_NAME" | tr '[:upper:]' '[:lower:]')
          fi
          RELEASE_NAME="gitph-${VERSION}-${PLATFORM}-$(uname -m)"
          
          mkdir -p "release/${RELEASE_NAME}/modules"
          
          # Copia os artefatos para a estrutura final
          cp -r artifacts/bin/* "release/${RELEASE_NAME}/"
          cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/"
          cp artifacts/LICENSE "release/${RELEASE_NAME}/"
          
          echo "Removendo símbolos de debug quando seguro..."
          # Em macOS o strip pode ter flags diferentes; evitamos quebrar binários nativos.
          if command -v strip >/dev/null 2>&1 && [ "$(uname -s)" != "Darwin" ]; then
            strip --strip-unneeded "release/${RELEASE_NAME}/gitph"
            find "release/${RELEASE_NAME}/modules" -type f \( -name "*.so" -o -name "*.dylib" \) -exec strip --strip-unneeded {} +
          else
            echo "Pulando strip no macOS para evitar problemas com binários nativos."
          fi
          
          echo "Criando o pacote .tar.gz..."
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2 # Versão atualizada da action
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
