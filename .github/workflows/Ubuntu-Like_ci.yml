# Copyright (C) 2025 Pedro Henrique / phkaiser13
# windows-build-manual-vcpkg.yml - Workflow de Integração Contínua para o projeto gitph em Windows.
#
# Este workflow automatiza o build em ambiente Windows, realizando a clonagem manual
# e configuração do vcpkg para gerenciar as dependências C++.
# SPDX-License-Identifier: Apache-2.0

name: Build do gitph (Windows com vcpkg manual)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest

    steps:
      # 1. Clona o repositório do seu projeto
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Clona, configura e instala as dependências com vcpkg manualmente
      - name: Clonar e Instalar vcpkg
        # Usamos o shell padrão do Windows runner, que é o PowerShell
        shell: pwsh
        run: |
          # Clonamos o repositório oficial do vcpkg para um diretório fixo (C:\vcpkg)
          git clone https://github.com/microsoft/vcpkg.git C:\vcpkg
          
          # Executamos o script de bootstrap para compilar o próprio vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
          
          # Instalamos as bibliotecas necessárias, especificando o triplet estático
          C:\vcpkg\vcpkg.exe install lua curl nlohmann-json --triplet x64-windows-static
          
          # Adicionamos o caminho raiz do vcpkg a uma variável de ambiente do GitHub Actions
          # para que os próximos passos possam encontrá-lo facilmente.
          echo "VCPKG_ROOT=C:\vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 3. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 4. Configura o ambiente Rust (com cache integrado)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 5. Configura o projeto com CMake, apontando para o toolchain do vcpkg
      - name: Configurar CMake
        run: |
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -A x64 `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows-static

      # 6. Compila o projeto usando o CMake
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel

      # 7. Salva os artefatos de build
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/gitph.exe
            src/plugins/
            LICENSE
