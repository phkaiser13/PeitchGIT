#
# build-windows.yml - Continuous Integration workflow for gitph on Windows.
#
# This workflow is carefully configured to build the project using the MSVC toolchain
# with dependencies managed by vcpkg. It is the most complex build environment.
#
# It compiles and tests on every push/pull_request. When a tag is pushed,
# it creates a standard .zip archive for distribution and uploads it as a
# release artifact for the 'release.yml' workflow.
#

name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
    # Run when a tag like v1.0.0 is pushed
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  # Allows manual triggering of the workflow
  workflow_dispatch:

jobs:
  build:
    # The job runs on the latest Windows Server environment provided by GitHub
    runs-on: windows-latest
    # Environment variables available to all steps in this job
    env:
      # Set the root for vcpkg to a predictable path in the workspace
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      # Set the default vcpkg triplet for 64-bit Windows using MSVC
      VCPKG_DEFAULT_TRIPLET: x64-windows
      RUSTFLAGS: ""

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install a specific version of CMake
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      # Step 3: Install Ninja build system using Chocolatey package manager
      - name: Install Ninja
        run: choco install ninja -y

      # Step 4: Install vcpkg and required C++ libraries. This is a critical step.
      # It clones vcpkg, bootstraps it, and then installs the libraries for the x64-windows triplet.
      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      # Step 5: Set up the Rust toolchain
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      # Step 6: Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      # Step 7: Configure the project using CMake.
      # This is a highly specific command for MSVC, using the Visual Studio 17 2022 generator.
      # It points CMake to the vcpkg toolchain file to find all dependencies correctly.
      - name: Configure CMake (MSVC)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      # Step 8: Build the project using the 'Release' configuration.
      # For multi-config generators like Visual Studio, the config is specified at build time.
      - name: Build Project
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # Step 9: Run tests if they exist.
      # continue-on-error prevents the workflow from failing if tests fail.
      - name: Run tests
        run: (cd build && ctest --output-on-failure -C Release)
        shell: pwsh
        continue-on-error: true

      # Step 10: Create a distributable .zip package, but ONLY for tags.
      # This step uses PowerShell's native compression tool.
      - name: Create Release Package (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          # Stage files for packaging in a temporary directory for a clean archive structure.
          mkdir release_package
          Copy-Item -Path "build/bin/Release/*" -Destination "release_package"
          Copy-Item -Path "src/plugins" -Destination "release_package" -Recurse
          Copy-Item -Path "LICENSE" -Destination "release_package"
          # Create the final .zip file.
          Compress-Archive -Path "release_package/*" -DestinationPath "gitph-windows-x64.zip"

      # Step 11: Upload the final release package as an artifact, ONLY for tags.
      # This artifact will be consumed by the 'release.yml' workflow.
      - name: Upload Release Package Artifact (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          # A unique and predictable name for the release artifact.
          name: gitph-release-package-windows-x64
          path: gitph-windows-x64.zip
          retention-days: 7

      # Step 12: Upload intermediate build artifacts for non-tag builds (CI).
      # This step runs for pushes and pull requests, but NOT for tags.
      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          # A different artifact name to avoid confusion with the release package.
          name: gitph-build-artifacts-windows-x64
          # The path contains the raw build output needed for debugging.
          # The 'Release' subdirectory is where Visual Studio places the final binaries.
          path: |
            build/bin/Release/
            src/plugins/
            LICENSE
          retention-days: 3
