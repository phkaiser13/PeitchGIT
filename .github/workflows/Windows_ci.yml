# .github/workflows/windows_ci.yml
# Copyright (C) 2025 Pedro Henrique / phkaiser13
#
# Workflow de Integração Contínua para Windows usando vcpkg e CMake.
# Versão corrigida e melhorada:
# - Fixa a versão do vcpkg para builds mais previsíveis.
# - Especifica o gerador do Visual Studio para o CMake.
# - Simplifica e torna mais robusto o empacotamento dos artefatos.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest
    env:
      # Padrão de arquitetura usada no workflow
      ARCH: x64
      # Define o diretório de build para ser usado em múltiplos passos
      BUILD_DIR: ${{ github.workspace }}/build

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Cache do Rust
        uses: Swatinem/rust-cache@v2

      - name: Instalar vcpkg e dependências
        shell: pwsh
        run: |
          $vcpkgDir = Join-Path $env:GITHUB_WORKSPACE 'vcpkg'
          # Clona o vcpkg
          git clone https://github.com/microsoft/vcpkg.git $vcpkgDir
          Push-Location $vcpkgDir
          # CORREÇÃO: Faz o checkout de uma tag específica do vcpkg
          git checkout 2023.10.19
          # Executa o bootstrap para gerar o vcpkg.exe
          .\bootstrap-vcpkg.bat
          # Instala as dependências necessárias
          .\vcpkg.exe install curl:x64-windows lua:x64-windows nlohmann-json:x64-windows
          Pop-Location
          # Exporta a variável de ambiente VCPKG_ROOT
          "VCPKG_ROOT=$vcpkgDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configurar CMake (Gerar arquivos de build)
        shell: pwsh
        run: |
          cmake -S ${{ github.workspace }} -B ${{ env.BUILD_DIR }} `
            -G "Visual Studio 17 2022" -A ${{ env.ARCH }} `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"

      - name: Compilar o Projeto com CMake
        shell: pwsh
        run: |
          cmake --build ${{ env.BUILD_DIR }} --config Release --parallel

      - name: Organizar artefatos para upload
        shell: pwsh
        run: |
          # Cria um diretório de stage para os artefatos
          $stagingDir = Join-Path $env:BUILD_DIR 'artifacts'
          New-Item -ItemType Directory -Path $stagingDir -Force | Out-Null
          
          # Copia os binários principais (executáveis e DLLs)
          Copy-Item -Path (Join-Path $env:BUILD_DIR 'bin/Release/*') -Destination $stagingDir -Recurse -Force
          
          # Copia os módulos
          $moduleDir = Join-Path $env:BUILD_DIR 'bin/modules/Release'
          if (Test-Path $moduleDir) {
            Copy-Item -Path (Join-Path $moduleDir '*') -Destination (Join-Path $stagingDir 'modules') -Recurse -Force
          }
          
          # Copia os plugins e a licença
          Copy-Item -Path (Join-Path '${{ github.workspace }}' 'src/plugins') -Destination $stagingDir -Recurse
          Copy-Item -Path (Join-Path '${{ github.workspace }}' 'LICENSE') -Destination $stagingDir

      - name: Upload dos artefatos de build (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows-x64
          path: ${{ env.BUILD_DIR }}/artifacts/


