name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test (Windows)
    runs-on: windows-latest
    env:
      VCPKG_ROOT: C:\vcpkg
      VCPKG_TRIPLET: x64-windows

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust (toolchain)
        uses: dtolnay/rust-toolchain@stable
        # opcional: se preferir, você pode especificar a toolchain como input:
        # with:
        #   toolchain: stable

      - name: Cache do Rust (cargo)
        uses: Swatinem/rust-cache@v2

      # (Opcional) Cache para vcpkg — acelera builds que usam vcpkg
      - name: Cache vcpkg (opcional)
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\downloads
            C:\vcpkg\packages
            C:\vcpkg\installed
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      # Instala vcpkg (opcional — só faz diferença se seu projeto usar vcpkg)
      - name: Instalar vcpkg (opcional)
        shell: pwsh
        run: |
          if (-not (Test-Path -Path $env:VCPKG_ROOT)) {
            Write-Host "Clonando vcpkg em $env:VCPKG_ROOT ..."
            git clone --depth=1 https://github.com/microsoft/vcpkg $env:VCPKG_ROOT
            & "$env:VCPKG_ROOT\bootstrap-vcpkg.bat"
          } else {
            Write-Host "vcpkg já existe em $env:VCPKG_ROOT"
          }

          # Se houver um arquivo vcpkg.json no repo, tenta instalar as dependências declaradas
          if (Test-Path -Path "$env:GITHUB_WORKSPACE\vcpkg.json") {
            Write-Host "vcpkg.json encontrado — instalando dependências declaradas..."
            & "$env:VCPKG_ROOT\vcpkg.exe" install --triplet $env:VCPKG_TRIPLET
          } else {
            Write-Host "vcpkg.json não encontrado — pulando instalação de pacotes."
          }

      # Configurar e Compilar com CMake (usa toolchain do vcpkg se disponível)
      - name: Configurar e Compilar com CMake
        shell: pwsh
        run: |
          $toolchainArg = ""
          if (Test-Path "$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake") {
            $toolchainArg = "-DCMAKE_TOOLCHAIN_FILE=$env:VCPKG_ROOT\scripts\buildsystems\vcpkg.cmake"
            Write-Host "Usando toolchain do vcpkg: $toolchainArg"
          } else {
            Write-Host "Toolchain do vcpkg não encontrado — prosseguindo sem ele."
          }

          # Criar diretório build e gerar solução com generator do Visual Studio 2022 (x64)
          & cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release $toolchainArg
          & cmake --build build --config Release -- /m

      - name: Rodar testes unitários (se existirem)
        if: always()
        shell: pwsh
        run: |
          if (Test-Path "build\CTestTestfile.cmake") {
            Push-Location build
            ctest -C Release --output-on-failure
            Pop-Location
          } else {
            Write-Host "Nenhum teste configurado (build\\CTestTestfile.cmake não encontrado)."
          }

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            build/**/Release/**
            build/bin/**
            src/plugins/**
            LICENSE
          if-no-files-found: ignore
