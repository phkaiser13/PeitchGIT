# Copyright (C) 2025 Pedro Henrique / phkaiser13
# Windows_ci.yml - Workflow de Integração Contínua para o projeto gitph no Windows.
#
# Este workflow automatiza o build em um ambiente Windows, garantindo
# que todas as dependências (C++, Go, Rust) são corretamente configuradas
# e que o projeto é compilado com sucesso usando CMake e o toolchain do Visual Studio.
#
# SPDX-License-Identifier: Apache-2.0

name: 'Build gitph (Windows)'

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: 'Build e Teste (Windows Server 2022)'
    runs-on: windows-latest

    steps:
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      # Usar vcpkg é a maneira mais robusta de gerenciar dependências C++ no Windows.
      # Esta action configura o vcpkg e armazena seu caminho na variável de ambiente VCPKG_ROOT.
      - name: 'Configurar vcpkg'
        uses: lukka/run-vcpkg@v11
        with:
          # Define um commit específico do vcpkg para garantir builds reproduzíveis.
          vcpkgGitCommitId: '1ab8318e8810961405b79646c188448906a382e7'

      - name: 'Instalar dependências C++ (Lua, libcurl, nlohmann-json)'
        run: |
          # Instala as bibliotecas necessárias para a arquitetura x64.
          # O vcpkg compila e armazena os artefatos em seu próprio cache.
          vcpkg install lua:x64-windows curl:x64-windows nlohmann-json:x64-windows

      - name: 'Configurar ambiente Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 'Configurar ambiente Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: 'Cache do Rust'
        uses: Swatinem/rust-cache@v2

      # O passo mais importante: configurar e compilar com CMake.
      # O parâmetro -DCMAKE_TOOLCHAIN_FILE aponta o CMake para o vcpkg,
      # permitindo que ele encontre as bibliotecas (Lua, curl) automaticamente.
      - name: 'Configurar e Compilar com CMake'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=${env:VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake
          cmake --build build --config Release --parallel


      - name: 'Upload dos artefatos de build'
        uses: actions/upload-artifact@v4
        with:
          # Nome único para o artefato do Windows
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/
            src/plugins/
            LICENSE
