name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      - name: Ensure Ninja (optional, used by some build steps)
        run: choco install ninja -y

      # Install vcpkg and needed libs (MSVC triplet)
      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          # instala libs para x64-windows (MSVC)
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      # Setup Rust only (sem run de cache que quebre se não houver Cargo.toml)
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Debug vcpkg installed files
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\share" -Recurse -Depth 2 | Select-Object -First 200
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\lib" -Recurse -Depth 1 | Select-Object -First 200
        shell: pwsh
  
      # Configure CMake -> FORÇAR generator Visual Studio 2022 x64 e usar vcpkg toolchain
      - name: Configure CMake (MSVC, Visual Studio generator)
        run: cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\x64-windows\share" -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      # Build (usando configuração Release do Visual Studio)
      - name: Build
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # Run tests (se houver)
      - name: Run tests
        run: |
          cmake --build build --config Release --target test || true
          ctest --test-dir build --output-on-failure -C Release || true
        shell: pwsh
        continue-on-error: true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitph-windows-build
          path: |
            build/bin
            build/*.exe
            build/**/Release/*.dll
            build/**/Release/*.pdb
            bin/modules
