# .github/workflows/Windows_ci.yml
# Copyright (C) 2025 Pedro Henrique / phkaiser13
#
# Workflow de Integração Contínua para o projeto gitph no Windows.
# Este workflow automatiza o build em um ambiente Windows, garantindo
# que todas as dependências (C++, Go, Rust) são corretamente configuradas
# e que o projeto é compilado com sucesso usando CMake.
#
# SPDX-License-Identifier: Apache-2.0

name: 'Build gitph (Windows)'

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows Server 2022)
    runs-on: windows-latest

    steps:
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      # O runner windows-latest já vem com o compilador MSVC do Visual Studio.
      # As dependências como Lua e libcurl precisam ser instaladas.
      # Usar vcpkg é a maneira mais robusta e moderna de gerenciar dependências C++ no Windows.
      - name: 'Configurar vcpkg para dependências C++'
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: '1ab8318e8810961405b79646c188448906a382e7' # Commit estável do vcpkg
          vcpkgJsonGlob: '**/vcpkg.json' # (Opcional) Se você usar vcpkg.json para definir dependências

      - name: 'Instalar dependências (Lua, libcurl, nlohmann-json)'
        run: |
          vcpkg install lua:x64-windows libcurl:x64-windows nlohmann-json:x64-windows

      - name: 'Configurar ambiente Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 'Configurar ambiente Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: 'Cache do Rust'
        uses: Swatinem/rust-cache@v2

      # O passo mais importante: configurar e compilar com CMake.
      # O parâmetro -DCMAKE_TOOLCHAIN_FILE aponta o CMake para o vcpkg,
      # permitindo que ele encontre as bibliotecas (Lua, libcurl) automaticamente.
      - name: 'Configurar e Compilar com CMake'
        shell: cmd
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=%VCPKG_ROOT%\scripts\buildsystems\vcpkg.cmake
          cmake --build build --config Release --parallel

      # Opcional: Rodar testes se eles existirem e forem configurados no CMake
      - name: 'Rodar testes unitários (se existirem)'
        if: always()
        run: |
          if (Test-Path -Path "build/CTestTestfile.cmake") {
            cd build
            ctest --output-on-failure --C Release
            cd ..
          } else {
            echo "Nenhum teste configurado (CTestTestfile.cmake não encontrado)."
          }

      # Faz o upload dos artefatos para serem usados pelo workflow de release
      - name: 'Upload dos artefatos de build'
        uses: actions/upload-artifact@v4
        with:
          # Nome único para evitar conflitos com outros builds
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/
            src/plugins/
            LICENSE
