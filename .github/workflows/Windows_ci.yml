name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build (windows-latest)
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install specific CMake version
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      # Install Ninja via Chocolatey
      - name: Install Ninja
        run: choco install ninja -y

      # Setup vcpkg (bootstrap + binary cache)
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      # Setup Rust
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # Configure CMake with vcpkg toolchain
      - name: Configure CMake
        run: |
          cmake -S . -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        shell: pwsh

      # Build
      - name: Build (CMake)
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # Run tests if available
      - name: Run tests (ctest)
        run: |
          if (Test-Path build) {
            cmake --build build --config Release --target test || true
            ctest --test-dir build --output-on-failure -C Release
          }
        shell: pwsh
        continue-on-error: true

      # Upload build artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitph-windows-build
          path: |
            build/bin
            build/*.exe
            build/**/Release/*.dll
            build/**/Release/*.pdb
            bin/modules
