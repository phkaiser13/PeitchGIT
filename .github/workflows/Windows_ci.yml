name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    name: Build (windows-latest)
    runs-on: windows-latest
    env:
      VCPKG_DEFAULT_TRIPLET: x64-windows
      # VCPKG_ROOT será definido pela action run-vcpkg; exposto como env para etapas seguintes.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install CMake + Ninja (get-cmake installs ninja too)
      - name: Install CMake & Ninja
        uses: lukka/get-cmake@v3
        # você pode fixar versão, ex: @v3.27

      # Bootstrap vcpkg (uses run-vcpkg@v11 : preps vcpkg + binary cache integration)
      - name: Setup vcpkg (bootstrap + binary cache)
        uses: lukka/run-vcpkg@v11
        # Não pedimos para instalar libs aqui; preferimos que o toolchain do CMake
        # invoque vcpkg automaticamente se houver vcpkg.json no root (recomendado).

      # Setup Rust (cargo) so cargo builds in CMake custom commands succeed
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      # Cache cargo (registry + git) and target to speed up rust module builds
      - name: Cache Cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Setup Go (needed for go modules that are built via go build -buildmode=c-shared)
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      # Configure CMake (uses vcpkg toolchain so vcpkg.json -> vcpkg install happens automatically)
      - name: Configure CMake
        run: |
          cmake -S . -B build `
            -G "Ninja" `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        shell: pwsh

      # Build (parallel)
      - name: Build (CMake)
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # (Opcional) Run unit tests if presentes
      - name: Run tests (ctest)
        run: |
          if (Test-Path build) {
            cmake --build build --config Release --target test || true
            ctest --test-dir build --output-on-failure -C Release
          }
        shell: pwsh
        continue-on-error: true

      # Upload build artifacts (binaries + modules)
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitph-windows-build
          path: |
            build/bin
            build/*.exe
            build/**/Release/*.dll
            build/**/Release/*.pdb
            bin/modules
