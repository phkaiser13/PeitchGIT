#
# build-windows.yml - Continuous Integration workflow for gitph on Windows.
#
# This workflow is carefully configured to build the project using the MSVC toolchain
# with dependencies managed by vcpkg. It builds and tests on every push/pull_request.
# When a tag is pushed, it creates a compressed .zip package ready for release.
#
# NOTE: The vcpkg and CMake configuration steps are highly specific.
# They should be modified with extreme caution.
#

name: Build gitph (Windows)

on:
  push:
    branches: [ "main" ]
    # Added trigger for tags to enable release packaging
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    # Environment variables required for vcpkg and the build process
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows
      RUSTFLAGS: ""

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is important for workflows that need tag/branch history
          fetch-depth: 0

      # Step 2: Install a specific version of CMake
      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1
        with:
          cmake-version: '3.29.3'

      # Step 3: Install Ninja build system using Chocolatey package manager
      - name: Install Ninja
        run: choco install ninja -y

      # Step 4: Install vcpkg and required C++ libraries for the x64-windows (MSVC) triplet.
      # This is a critical step for dependency management on Windows.
      - name: Install vcpkg and libraries
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      # Step 5: Set up the Rust toolchain
      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

          
      # Step 7: Debugging step to list installed vcpkg files and verify paths
      - name: Debug vcpkg installed files
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\share" -Recurse -Depth 2 | Select-Object -First 200
          Get-ChildItem -Path "${{ env.VCPKG_ROOT }}\installed\x64-windows\lib" -Recurse -Depth 1 | Select-Object -First 200
        shell: pwsh
        
      # Step 8: Configure the project using CMake.
      # This uses the "Visual Studio 17 2022" generator and points to the vcpkg toolchain file.
      # The flags explicitly help CMake find the libraries installed by vcpkg.
      - name: Configure CMake (MSVC, Visual Studio generator)
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" `
            -DCMAKE_PREFIX_PATH="${{ env.VCPKG_ROOT }}\installed\x64-windows\share" `
            -DLua_FOUND=TRUE `
            -DLUA_INCLUDE_DIR="${{ env.VCPKG_ROOT }}\installed\x64-windows\include" `
            -DLUA_LIBRARY="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DLUA_LIBRARIES="${{ env.VCPKG_ROOT }}\installed\x64-windows\lib\lua.lib" `
            -DCMAKE_BUILD_TYPE=Release
        shell: pwsh

      # Step 9: Build the project using the 'Release' configuration.
      - name: Build Project
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # Step 10: Run tests if they exist, continuing on error.
      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure
        shell: pwsh
        continue-on-error: true


      # Step 13: Upload intermediate build artifacts for non-tag builds (CI).
      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows-x64
          # Caminhos corrigidos para o executável, módulos, plugins e licença
          path: |
            build/bin/
            src/plugins/
            LICENSE
