# .github/workflows/build_windows_installer.yml
# Copyright (C) 2025 Pedro Henrique / phkaiser13
#
# SPDX-License-Identifier: Apache-2.0
#
# Este workflow automatiza a criação de um instalador .exe para a aplicação gitph
# no ambiente Windows. Ele orquestra os seguintes passos:
# 1. Configura o ambiente de build (MSVC, vcpkg, NSIS).
# 2. Compila a aplicação principal, todos os módulos e o helper do instalador.
# 3. Executa o NSIS para empacotar tudo em um único executável de instalação.
# 4. Disponibiliza o instalador final como um artefato para download.

name: 'Gerar Instalador do Windows'

# Gatilho do workflow: permite execução manual a partir da aba "Actions" do GitHub.
on:
  workflow_dispatch:

jobs:
  build-installer:
    name: 'Construir Instalador (.exe)'
    runs-on: windows-latest

    # Variáveis de ambiente para o vcpkg
    env:
      VCPKG_ROOT: ${{ github.workspace }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      # 1. Checkout do código-fonte
      - name: 'Checkout do código'
        uses: actions/checkout@v4

      # 2. Instala o NSIS (ferramenta para criar o instalador)
      - name: 'Instalar NSIS'
        run: choco install nsis -y

      # 3. Instala o vcpkg e as bibliotecas C/C++ necessárias
      - name: 'Instalar vcpkg e bibliotecas'
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: pwsh

      # 4. Configura os ambientes Go e Rust
      - name: 'Configurar ambiente Go'
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 'Configurar ambiente Rust'
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # 5. Configura o projeto com CMake
      - name: 'Configurar CMake'
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake"
        shell: pwsh

      # 6. Compila todo o projeto (App, Módulos, Helper do Instalador)
      - name: 'Compilar Projeto com CMake'
        run: cmake --build build --config Release --parallel
        shell: pwsh

      # 7. Extrai a versão do projeto para nomear o instalador
      - name: 'Extrair Versão do Projeto'
        id: get_version
        run: |
          $content = Get-Content -Path "CMakeLists.txt" -Raw
          $version = [regex]::Match($content, 'project\(gitph LANGUAGES C CXX VERSION (\d+\.\d+\.\d+)\)').Groups[1].Value
          echo "VERSION=$version" >> $env:GITHUB_ENV
        shell: pwsh

      # 8. Gera o instalador com NSIS
      - name: 'Gerar Instalador com NSIS'
        run: |
          # Define a versão como uma variável para o script NSIS usar
          makensis.exe /DVERSION=${{ env.VERSION }} "installer/nsis/gitph_installer.nsi"
        shell: pwsh

      # 9. Faz o upload do instalador .exe como um artefato
      - name: 'Upload do Instalador'
        uses: actions/upload-artifact@v4
        with:
          name: gitph-installer-windows
          path: installer/nsis/gitph_installer_v${{ env.VERSION }}.exe
