# Copyright (C) 2025 Pedro Henrique / phkaiser13
# Fedora-like_ci.yml - Workflow de Integração Contínua para o projeto gitph em Fedora Linux.
#
# Esta é uma versão corrigida e funcional do workflow, alinhada com as melhores
# práticas dos outros CI do projeto.
# SPDX-License-Identifier: Apache-2.0

name: Build and Release gitph (Fedora-like Linux)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test (Fedora Container)
    runs-on: ubuntu-latest
    container:
      image: fedora:latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Instalar dependências de sistema (Fedora)
        run: |
          # Atualiza os metadados e instala todas as dependências de uma vez
          dnf -y update
          dnf install -y \
            gcc-c++ \
            make \
            cmake \
            pkgconf-pkg-config \
            lua-devel \
            libcurl-devel \
            openssl-devel \
            nlohmann-json-devel \
            binutils \
            git \
            tar \
            gzip \
            which
          # Limpa o cache para otimizar
          dnf clean all

      - name: Configurar ambiente Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Configurar ambiente Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache do Rust
        uses: Swatinem/rust-cache@v2

      - name: Configurar e Compilar com CMake
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Rodar testes unitários (se existirem)
        if: always()
        run: |
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure)
          else
            echo "Nenhum teste configurado (CTestTestfile.cmake não encontrado)."
          fi

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-fedora
          path: |
            build/bin/
            src/plugins/
            LICENSE

  release:
    name: Criar Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build (Fedora)
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-fedora
          path: artifacts/

      - name: Empacotar para Release
        run: |
          # Determina a versão a partir da tag do Git e o nome do pacote
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-fedora-$(uname -m)"

          # Cria a estrutura de diretórios final
          mkdir -p "release/${RELEASE_NAME}/modules"

          # Copia os arquivos para a estrutura final
          cp -r artifacts/bin/* "release/${RELEASE_NAME}/"
          cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/"
          cp artifacts/LICENSE "release/${RELEASE_NAME}/"

          # Remove símbolos de debug dos binários para reduzir o tamanho
          echo "Removendo símbolos de debug..."
          strip --strip-unneeded "release/${RELEASE_NAME}/gitph"
          find "release/${RELEASE_NAME}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} +

          # Cria o arquivo .tar.gz
          echo "Criando o pacote .tar.gz..."
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")

          # Exporta o caminho do pacote para o próximo passo
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
