name: Build and Release gitph (Fedora-like Linux)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test (Fedora container)
    # Use an Ubuntu runner but run the job inside an official Fedora container:
    runs-on: ubuntu-latest
    container:
      image: fedora:latest
      # options: '--user root' # default is root; uncomment if you need extra docker options

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show basic info (debug)
        run: |
          uname -a
          cat /etc/fedora-release || echo "no /etc/fedora-release"
          whoami
          id

      - name: Install system dependencies (Fedora)
        run: |
          # update repo metadata first
          dnf -y update
          # install build essentials and common dev packages
          dnf install -y \
            gcc-c++ \
            make \
            cmake \
            pkgconf-pkg-config \
            pkgconf \
            lua-devel \
            libcurl-devel \
            openssl-devel \
            binutils \
            git \
            tar \
            gzip \
            unzip \
            which \
            ca-certificates \
            gnupg \
            findutils || dnf -y install gcc-c++ cmake make pkgconfig lua-devel libcurl-devel binutils
          # Clean DNF cache to reduce image bloat / speed up subsequent installs
          dnf clean all || true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust target (optional)
        uses: Swatinem/rust-cache@v2

      - name: Configure CMake
        run: |
          mkdir -p build
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=/usr/local

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Run unit tests (if any)
        if: always()
        run: |
          # adapt this to your test target (example: ctest)
          if [ -f build/CTestTestfile.cmake ]; then
            (cd build && ctest --output-on-failure --parallel $(nproc))
          else
            echo "No tests configured (no CTestTestfile.cmake)."
          fi

      - name: Package minimal artifacts
        run: |
          mkdir -p release_tmp/${GITHUB_REF_NAME:-local}/modules
          # copy built binaries (adjust paths if different)
          cp -r build/bin/* release_tmp/${GITHUB_REF_NAME:-local}/ || true
          cp -r src/plugins/* release_tmp/${GITHUB_REF_NAME:-local}/modules/ || true
          cp LICENSE release_tmp/${GITHUB_REF_NAME:-local}/ || true
          # make a tar.gz artifact for debugging
          tar -czf gitph-fedora-build-${GITHUB_SHA::8}.tar.gz -C release_tmp ${GITHUB_REF_NAME:-local} || true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-fedora
          path: |
            build/bin/
            release_tmp/
            gitph-fedora-build-*.tar.gz
            src/plugins/
            LICENSE

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts (Fedora)
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-fedora
          path: artifacts/

      - name: Package for Release
        run: |
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-fedora-$(uname -m)"
          mkdir -p "release/${RELEASE_NAME}/modules"
          # adjust these source paths if your build placed things elsewhere
          if [ -d "artifacts/build/bin" ]; then
            cp -r artifacts/build/bin/* "release/${RELEASE_NAME}/" || true
          elif [ -d "artifacts/build/bin" ]; then
            cp -r artifacts/build/bin/* "release/${RELEASE_NAME}/" || true
          fi
          if [ -d "artifacts/release_tmp/${VERSION}/modules" ]; then
            cp -r artifacts/release_tmp/${VERSION}/modules/* "release/${RELEASE_NAME}/modules/" || true
          fi
          cp artifacts/LICENSE "release/${RELEASE_NAME}/" || cp LICENSE "release/${RELEASE_NAME}/" || true
          # strip (ensure binutils present in container or host; fallback to echo)
          if command -v strip >/dev/null 2>&1; then
            strip --strip-unneeded "release/${RELEASE_NAME}/gitph" || true
            find "release/${RELEASE_NAME}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} + || true
          else
            echo "strip not available; skipping symbol stripping"
          fi
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publish Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
