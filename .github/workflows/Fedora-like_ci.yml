# Copyright (C) 2025 Pedro Henrique / phkaiser13
# main_ci.yml - Workflow de Integração Contínua para o projeto gitph.
#
# Este workflow automatiza o processo de build e release da aplicação.
# Ele garante que o projeto compila corretamente em um ambiente limpo
# e cria pacotes de distribuição automaticamente quando uma nova versão é marcada.
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Fedora)

# Gatilhos do workflow:
on:
  push:
    branches: [ "main" ] # Executa quando há um push para a branch main
    tags:
      - 'v*'          # Executa quando uma tag como v1.0.0 é criada
  pull_request:
    branches: [ "main" ] # Executa em pull requests para a main

jobs:
  # Job principal de build que compila e verifica o projeto em ambiente Fedora
  build:
    name: Build e Teste (Fedora)
    runs-on: fedora-latest # ALTERADO: Usando a imagem mais recente do Fedora

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Instala as dependências de sistema (C/C++, Lua, Curl) para Fedora
      #    ALTERADO: Substituído 'apt-get' por 'dnf' e ajustado os nomes dos pacotes.
      - name: Instalar dependências do sistema (Fedora)
        run: sudo dnf install -y gcc-c++ cmake make pkg-config lua-devel libcurl-devel nlohmann-json-devel

      # 3. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 4. Configura o ambiente Rust (com cache integrado)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 5. Configura e compila o projeto usando CMake em modo Release
      - name: Configurar CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Compilar Projeto
        run: cmake --build build --parallel

      # 6. Salva os artefatos de build para o job de release poder usá-los
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-fedora
          path: |
            build/bin/
            src/plugins/
            LICENSE

  # Job de release que só executa quando uma tag é criada
  release:
    name: Criar Release
    needs: build # Depende do sucesso do job de build
    # O job de release pode continuar em Ubuntu, pois apenas empacota os arquivos já compilados.
    # Se preferir, pode alterar para fedora-latest também.
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      # 1. Clona o repositório (necessário para ter o contexto do Git)
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Baixa os artefatos compilados pelo job de build do Fedora
      - name: Download dos artefatos de build (Fedora)
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-fedora # Garante que está baixando os artefatos corretos
          path: artifacts/

      # 3. Empacota os arquivos de release
      - name: Empacotar para Release
        run: |
          # Determina a versão a partir da tag do Git e o nome do pacote
          # Adicionando 'fedora' ao nome para diferenciar de builds de outras distros
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-fedora-$(uname -m)"
          
          # Cria a estrutura de diretórios final diretamente
          mkdir -p "release/${RELEASE_NAME}/modules"
          
          # Copia os arquivos para a estrutura final
          cp -r artifacts/bin/* "release/${RELEASE_NAME}/"
          cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/"
          cp artifacts/LICENSE "release/${RELEASE_NAME}/"
          
          # Tira informações de debug dos binários para reduzir tamanho
          echo "Removendo símbolos de debug..."
          strip --strip-unneeded "release/${RELEASE_NAME}/gitph"
          find "release/${RELEASE_NAME}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} +
          
          # Cria o arquivo .tar.gz
          echo "Criando o pacote .tar.gz..."
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          
          # Exporta o caminho do pacote para o próximo passo
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      # 4. Cria a Release no GitHub e faz o upload do pacote .tar.gz
      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
