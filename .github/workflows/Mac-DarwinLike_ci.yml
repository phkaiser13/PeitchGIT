name: Build gitph (macOS & Darwin systems)

on:
  # Run on pushes to the main branch
  push:
    branches: [ "main" ]
    # Also run when a tag starting with 'v' is pushed
    tags:
      - 'v*'
  # Run on pull requests targeting the main branch
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    # The job name dynamically includes the architecture from the matrix.
    name: Build for macOS (${{ matrix.arch }})
    
    # Define a build matrix to run this job on multiple configurations.
    strategy:
      # Ensures that if one matrix job fails, the others will continue to run.
      fail-fast: false
      matrix:
        include:
          # Configuration for Intel-based Macs
          - os: macos-13
            arch: x86_64
          # Configuration for Apple Silicon (M1/M2/M3) Macs
          - os: macos-14
            arch: arm64
            
    # The runner is selected dynamically based on the 'os' variable from the matrix.
    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out the repository's code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Install build dependencies using Homebrew package manager.
      - name: Install dependencies (Homebrew)
        run: brew install cmake pkg-config lua curl nlohmann-json

      # Step 3: Set up the Go environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # Step 4: Set up the Rust toolchain and cache dependencies
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # Step 5: Configure the project using CMake
      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      # Step 6: Compile the project
      - name: Compile Project
        run: cmake --build build --parallel

      # Step 7: Create a distributable package, but ONLY for tags.
      # The package name includes the architecture from the matrix to make it unique.
      - name: Create Release Package (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          tar -czvf gitph-macos-${{ matrix.arch }}.tar.gz -C build/bin . src/plugins/ LICENSE

      # Step 8: Upload the final release package as an artifact, ONLY for tags.
      # The artifact name is also unique per architecture, which is critical.
      # The release workflow will download both artifacts (x86_64 and arm64).
      - name: Upload Release Package Artifact (only for tags)
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          # e.g., 'gitph-release-package-macos-x86_64'
          name: gitph-release-package-macos-${{ matrix.arch }}
          # e.g., 'gitph-macos-x86_64.tar.gz'
          path: gitph-macos-${{ matrix.arch }}.tar.gz
          retention-days: 7

      # Step 9: Upload intermediate build artifacts for non-tag builds (CI).
      # This step runs for pushes and pull requests, but NOT for tags.
      - name: Upload CI Build Artifacts (not for tags)
        if: "!startsWith(github.ref, 'refs/tags/')"
        uses: actions/upload-artifact@v4
        with:
          # The artifact name is unique per architecture for CI as well.
          name: gitph-build-artifacts-macos-${{ matrix.arch }}
          path: |
            build/bin/
            src/plugins/
            LICENSE
          retention-days: 3
