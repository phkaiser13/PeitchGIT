# Copyright (C) 2025 Pedro Henrique / phkaiser13
# SPDX-License-Identifier: Apache-2.0

name: 'Create Release Installers'

# Aciona o workflow somente em push de tags no formato 'v*' (ex: v1.0, v2.3.4)
on:
  push:
    tags:
      - 'v*'

jobs:
  # ==================================================================== #
  # == JOB 1: Criar Instaladores Nativos para Windows (.exe e NUPKG) === #
  # ==================================================================== #
  build-windows:
    name: 'Build Windows Installers (.exe & .nupkg)'
    runs-on: windows-latest
    env:
      VCPKG_ROOT: ${{ github.workspace }}\vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Get version from tag'
        id: get_version
        run: echo "VERSION=${{ github.ref_name }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: 'Install build dependencies (vcpkg, NSIS, Chocolatey)'
        run: |
          git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          cd $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
          choco install nsis chocolatey-core.extension -y
        shell: pwsh

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable

      - name: 'Configure and Build Project with CMake'
        run: |
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}\scripts\buildsystems\vcpkg.cmake" -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release --parallel
        shell: pwsh

      - name: 'Build NSIS Installer (.exe)'
        run: |
          # O /DVERSION passa a vers√£o para o script .nsi, que nomeia o OutFile
          makensis.exe /DVERSION=${{ env.VERSION }} installer\windows\installer.nsi
        shell: pwsh

      - name: 'Update Chocolatey Package Version'
        run: |
          $versionOnly = "${{ env.VERSION }}".Substring(1)
          (Get-Content packaging\chocolatey\gitph.nuspec).replace('1.0.0', $versionOnly) | Set-Content packaging\chocolatey\gitph.nuspec
          (Get-Content packaging\chocolatey\tools\chocolateyinstall.ps1).replace('v1.0.0', "${{ env.VERSION }}") | Set-Content packaging\chocolatey\tools\chocolateyinstall.ps1
        shell: pwsh
      
      - name: 'Build Chocolatey Package (.nupkg)'
        run: choco pack (Resolve-Path "packaging/chocolatey/gitph.nuspec") -o .
        shell: pwsh

      - name: 'Upload Windows Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installers
          path: |
            gitph_installer_${{ env.VERSION }}.exe
            *.nupkg

  # =============================================================== #
  # == JOB 2: Criar Pacotes Nativos para Linux (.deb e .rpm)      === #
  # =============================================================== #
  build-linux:
    name: 'Build Linux Packages (${{ matrix.name }})'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: Debian (.deb)
            container: "ubuntu:22.04"
            build_script: "installer/linux/build_deb.sh"
            deps: "build-essential cmake pkg-config libcurl4-openssl-dev libssl-dev"
          - name: Fedora (.rpm)
            container: "fedora:latest"
            build_script: "installer/linux/build_rpm.sh"
            deps: "gcc-c++ cmake make rpm-build findutils"
            
    container:
      image: ${{ matrix.container }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install build dependencies'
        run: |
          if [ -f /etc/debian_version ]; then
            apt-get update && apt-get install -y ${{ matrix.deps }}
          elif [ -f /etc/fedora-release ]; then
            dnf install -y ${{ matrix.deps }}
          fi

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable

      - name: 'Configure and Build Project with CMake'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: 'Build Linux Package'
        run: |
          chmod +x ${{ matrix.build_script }}
          # Passa a vers√£o como vari√°vel de ambiente para o script de build
          VERSION=${{ github.ref_name }} ./${{ matrix.build_script }}
      
      - name: 'Upload Linux Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer-${{ matrix.name }}
          path: installer/linux/dist/*

  # =================================================== #
  # == JOB 3: Criar Pacote Nativo para macOS (.pkg)   === #
  # =================================================== #
  build-macos:
    name: 'Build macOS Installer (.pkg)'
    runs-on: macos-latest
    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v4

      - name: 'Install dependencies (Homebrew)'
        run: brew install cmake pkg-config lua curl nlohmann-json

      - name: 'Setup Rust'
        uses: dtolnay/rust-toolchain@stable

      - name: 'Configure and Build Project with CMake'
        run: |
          cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: 'Build macOS Package (.pkg)'
        run: |
          chmod +x installer/macos/build_pkg.sh
          # Passa a vers√£o para o script de build
          VERSION=${{ github.ref_name }} ./installer/macos/build_pkg.sh

      - name: 'Upload macOS Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: installer/macos/dist/*.pkg

  # ===================================================== #
  # == JOB FINAL: Criar a Release e Anexar os Pacotes  === #
  # ===================================================== #
  create-release:
    name: 'Create GitHub Release'
    runs-on: ubuntu-latest
    permissions:
      contents: write 
    needs: [build-windows, build-linux, build-macos]

    steps:
      - name: 'Download all installer artifacts'
        uses: actions/download-artifact@v4
        with:
          path: release-assets/
      
      - name: 'Prepare release files'
        run: |
          # Organiza todos os pacotes num √∫nico diret√≥rio para o upload
          mkdir final-release
          find release-assets -type f -exec mv {} final-release/ \;

      - name: 'List final assets for verification'
        run: ls -R final-release/
      
      - name: 'Create GitHub Release and Upload Assets'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: 'Release ${{ github.ref_name }}'
          body: |
            ### Release Oficial da Vers√£o ${{ github.ref_name }} üöÄ
            
            Este √© um lan√ßamento automatizado. Baixe o instalador apropriado para o seu sistema operacional abaixo.
            
            Obrigado por usar o **gitph**!
          files: |
            final-release/*
