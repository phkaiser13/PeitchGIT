name: Build and Release gitph (Arch-like - containerized)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test (Arch Linux Container)
    runs-on: ubuntu-latest
    # Define o contêiner no nível do job. O GitHub Actions gerencia o resto.
    container:
      image: archlinux:latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Cada comando é agora um passo separado, tornando o debug mais fácil.
      - name: Initialize Pacman Keyring
        run: |
          pacman-key --init
          pacman-key --populate archlinux

      - name: Install system dependencies (Arch)
        run: |
          pacman -Syu --noconfirm --needed \
            base-devel cmake lua curl nlohmann-json go rust git pkgconf

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: Configure CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      - name: Compile Project
        run: cmake --build build --parallel

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          # Nome de artefato único para evitar conflitos no job de release
          name: gitph-build-artifacts-arch 
          path: |
            build/bin/
            src/plugins/
            LICENSE

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          # Baixa os artefatos específicos do Arch
          name: gitph-build-artifacts-arch
          path: artifacts/
      
      # O resto do seu job de release pode permanecer o mesmo.
      - name: Package for Release
        run: |
          set -euo pipefail
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-linux-$(uname -m)"
          mkdir -p "release/${RELEASE_NAME}/modules"

          if [ -d artifacts/bin ]; then
            cp -r artifacts/bin/* "release/${RELEASE_NAME}/" || true
          fi
          if [ -d artifacts/plugins ]; then
            cp -r artifacts/plugins/* "release/${RELEASE_NAME}/modules/" || true
          fi
          if [ -f artifacts/LICENSE ]; then
            cp artifacts/LICENSE "release/${RELEASE_NAME}/" || true
          fi

          if command -v strip >/dev/null 2>&1; then
            echo "Stripping debug symbols..."
            if [ -f "release/${RELEASE_NAME}/gitph" ]; then
              strip --strip-unneeded "release/${RELEASE_NAME}/gitph" || true
            fi
            find "release/${RELEASE_NAME}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} + || true
          fi

          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publish Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
