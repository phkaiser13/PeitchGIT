name: Build and Release gitph (Arch-like - containerized)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test (Arch Linux via Docker)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure Docker available
        run: docker --version

      - name: Build inside Arch Linux container
        # Run the entire build inside an ephemeral archlinux container and
        # write build outputs to the mounted workspace (/work).
        run: |
          set -euo pipefail
          docker run --rm \
            -v "${{ github.workspace }}":/work \
            -w /work \
            archlinux:latest \
            /bin/bash -lc "
              set -euo pipefail

              # Initialize pacman keyring (required in fresh containers)
              pacman -Sy --noconfirm archlinux-keyring
              pacman-key --init
              pacman-key --populate archlinux

              # Update system and install packages. --needed avoids reinstalling
              pacman -Syu --noconfirm --needed \
                base-devel \
                cmake \
                lua \
                curl \
                nlohmann-json \
                go \
                rust \
                git \
                pkgconf

              # Optional: print versions for debugging
              cmake --version
              lua -v || true
              go version || true
              rustc --version || true
              cargo --version || true

              # Configure + build
              cmake -S . -B build -DCMAKE_BUILD_TYPE=Release
              cmake --build build --parallel

              # Prepare artifact layout in workspace
              mkdir -p /work/artifacts/bin
              mkdir -p /work/artifacts/plugins || true

              # Copy produced binaries and modules (adjust paths if different)
              if [ -d build/bin ]; then
                cp -r build/bin/* /work/artifacts/bin/ || true
              fi

              # If you have src/plugins or modules, copy them (best-effort)
              if [ -d src/plugins ]; then
                cp -r src/plugins/* /work/artifacts/plugins/ || true
              fi

              # Copy LICENSE for packaging later
              cp LICENSE /work/artifacts/ || true

              echo \"BUILD_DONE=1\"
            "

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts
          path: |
            artifacts/bin/
            artifacts/plugins/
            artifacts/LICENSE

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts
          path: release-assets/

      - name: Package for Release
        run: |
          set -euo pipefail
          VERSION=${{ github.ref_name }}
          RELEASE_NAME="gitph-${VERSION}-linux-$(uname -m)"
          mkdir -p "release/${RELEASE_NAME}/modules"

          # Copy binary files (adjust names if different)
          if [ -d release-assets/bin ]; then
            cp -r release-assets/bin/* "release/${RELEASE_NAME}/" || true
          fi
          if [ -d release-assets/plugins ]; then
            cp -r release-assets/plugins/* "release/${RELEASE_NAME}/modules/" || true
          fi
          if [ -f release-assets/LICENSE ]; then
            cp release-assets/LICENSE "release/${RELEASE_NAME}/" || true
          fi

          # Strip debug symbols where possible
          if command -v strip >/dev/null 2>&1; then
            echo "Stripping debug symbols..."
            if [ -f "release/${RELEASE_NAME}/gitph" ]; then
              strip --strip-unneeded "release/${RELEASE_NAME}/gitph" || true
            fi
            find "release/${RELEASE_NAME}/modules" -type f -name "*.so" -exec strip --strip-unneeded {} + || true
          fi

          # Create archive
          (cd release && tar -czf "${RELEASE_NAME}.tar.gz" "${RELEASE_NAME}")
          echo "RELEASE_PATH=release/${RELEASE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Publish Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
