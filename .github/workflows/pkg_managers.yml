name: 'Mirror Package Manager Repositories'

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: write

env:
  GH_PAT: ${{ secrets.GH_PAT }}

jobs:
  mirror:
    name: Mirror repositories
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: homebrew-tap
            src_dir: homebrew-tap
            repo: phkaiser13/homebrew-tap
            dest_path: homebrew-tap-mirror
          - name: vcpkg-registry
            src_dir: vcpkg-registry
            repo: phkaiser13/vcpkg-registry
            dest_path: vcpkg-registry-mirror
          - name: aur-packages
            src_dir: aur-packages
            repo: phkaiser13/aur-packages
            dest_path: aur-packages-mirror

    steps:
      - name: Checkout main repository (source)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure rsync & git are available
        run: sudo apt-get update && sudo apt-get install -y rsync git

      - name: "Mirror repo: ${{ matrix.name }}"
        env:
          TARGET_REPO: ${{ matrix.repo }}
          TARGET_PATH: ${{ matrix.dest_path }}
          SRC_DIR: ${{ matrix.src_dir }}
          TARGET_URL: https://${{ secrets.GH_PAT }}@github.com/${{ matrix.repo }}.git
        run: |
          set -euo pipefail
          echo "---- Mirror: $TARGET_REPO ----"
          echo "Source dir: $SRC_DIR"
          echo "Target path: $TARGET_PATH"

          # If source directory doesn't exist or is empty -> nothing to sync
          if [ ! -d "$SRC_DIR" ] || [ -z "$(ls -A "$SRC_DIR" 2>/dev/null || true)" ]; then
            echo "Source directory '$SRC_DIR' is missing or empty. Skipping mirror for $TARGET_REPO."
            exit 0
          fi

          # Check remote refs (if empty -> remote likely has no commits)
          REMOTE_REFS="$(git ls-remote "$TARGET_URL" || true)"
          if [ -n "$REMOTE_REFS" ]; then
            echo "Remote has refs — cloning into $TARGET_PATH"
            rm -rf "$TARGET_PATH"
            git clone --depth 1 "$TARGET_URL" "$TARGET_PATH"
            cd "$TARGET_PATH"
            # try to checkout main (or create it)
            git checkout main 2>/dev/null || git checkout -b main || true
          else
            echo "Remote appears empty — initializing local repo at $TARGET_PATH and adding origin"
            rm -rf "$TARGET_PATH"
            mkdir -p "$TARGET_PATH"
            cd "$TARGET_PATH"
            git init
            git checkout -b main || true
            git remote add origin "$TARGET_URL"
          fi

          # Sync files from source into target (exclude .git)
          echo "Syncing files..."
          rsync -av --delete --exclude='.git' "../${SRC_DIR}/" .

          # Configure git author
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # If repo has no commits yet, create an initial commit
          if ! git rev-parse --verify HEAD >/dev/null 2>&1; then
            echo "No commits found in target; creating initial commit."
            git add -A
            git commit -m "chore: initial mirror from main repository"
            git push --set-upstream origin main
            echo "Pushed initial commit to origin/main"
            exit 0
          fi

          # Only commit & push if there are changes
          if git status --porcelain | grep -q .; then
            echo "Changes detected — committing and pushing."
            git add -A
            git commit -m "chore: Sync updates from main repository"
            git push origin HEAD:main
            echo "Pushed changes to origin/main"
          else
            echo "No changes to sync."
          fi
