# Copyright (C) 2025 Pedro Henrique / phkaiser13
# windows_build.yml - Workflow de Integração Contínua para Windows.
#
# Este workflow valida a compilação do projeto no ambiente Windows,
# garantindo que todas as dependências (C++, Rust, Go) são resolvidas
# e que o projeto compila com sucesso usando o toolchain do Visual Studio
# e o gerenciador de pacotes vcpkg.
#
# SPDX-License-Identifier: Apache-2.0

name: Build para Windows

# Gatilhos do workflow:
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build em Windows (MSVC)
    runs-on: windows-latest # Usa o ambiente Windows mais recente com Visual Studio

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Configura o ambiente Rust (com cache integrado)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 4. Configura o vcpkg para gerenciar dependências C++
      #    Esta action oficial da Microsoft clona e prepara o vcpkg.
      #    O caminho para o vcpkg fica disponível na variável de ambiente VCPKG_ROOT.
      - name: Setup vcpkg
        uses: johnwason/vcpkg-action@v7 # <-- A versão foi atualizada para v7

      # 5. Instala as dependências C++ via vcpkg
      #    Exatamente como você faria localmente.
      - name: Instalar dependências com vcpkg
        run: vcpkg install curl lua nlohmann-json
        shell: cmd # Usar o shell padrão do Windows

      # 6. Configura o projeto com CMake
      #    O ponto crucial aqui é o uso de CMAKE_TOOLCHAIN_FILE para que o CMake
      #    encontre as bibliotecas instaladas pelo vcpkg.
      - name: Configurar CMake
        run: >
          cmake -S . -B build
          -D CMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        shell: bash # Usar bash para facilitar a expansão da variável de ambiente

      # 7. Compila o projeto
      #    Executa o build em modo Release e em paralelo para maior velocidade.
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel
