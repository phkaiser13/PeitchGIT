name: Build do gitph no Windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build no Windows
    runs-on: windows-latest

    env:
      # garante consistência, caso precise em etapas posteriores
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache vcpkg installed (opcional)
        uses: actions/cache@v4
        with:
          path: |
            ${{ runner.temp }}/vcpkg-cache
            # cache simples: cacheamos a pasta 'installed' que é a mais custosa
            ${{ env.VCPKG_ROOT }}/installed
          key: vcpkg-installed-${{ hashFiles('**/vcpkg.json') }}-${{ runner.os }}
          restore-keys: |
            vcpkg-installed-${{ runner.os }}

      - name: Setup vcpkg
        uses: microsoft/setup-vcpkg@v1.1
        with:
          vcpkg-commit-id: '1ab15041a41b5a2a8996a6d9106b0d95c4779848'

      - name: Mostrar VCPKG_ROOT (debug)
        shell: pwsh
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          Get-ChildItem -Path $env:VCPKG_ROOT -Force | Select-Object -First 10

      - name: Instalar dependências com vcpkg
        shell: pwsh
        run: |
          # usa o vcpkg.exe diretamente garantindo que encontramos o binário
          $v = Join-Path $env:VCPKG_ROOT 'vcpkg.exe'
          if (-not (Test-Path $v)) {
            Throw "vcpkg.exe não encontrado em $env:VCPKG_ROOT"
          }
          & $v install curl lua nlohmann-json --triplet x64-windows
          # opcional: integrar (não obrigatório para CMake toolchain, mas útil)
          & $v integrate install

      - name: Garantir CMake (opcional)
        uses: lukka/get-cmake@v4
        with:
          version: '3.27.0' # ou remova se confiar no CMake do runner

      - name: Configurar CMake com toolchain do vcpkg
        shell: pwsh
        run: |
          $toolchain = Join-Path $env:VCPKG_ROOT 'scripts\buildsystems\vcpkg.cmake'
          if (-not (Test-Path $toolchain)) {
            Throw "toolchain do vcpkg não encontrado em $toolchain"
          }
          cmake -S . -B build -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE="$toolchain" -DCMAKE_BUILD_TYPE=Release

      - name: Compilar (Release)
        shell: pwsh
        run: |
          cmake --build build --config Release --parallel

      - name: Listar binários gerados (debug)
        shell: pwsh
        run: |
          Get-ChildItem -Recurse -Path build -Filter *.exe,*.dll,*.lib | Select-Object FullName -First 50

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-windows-artifacts
          path: |
            build/bin/
            build/bin/**/*
            build/**/Release/**
            src/plugins/
            LICENSE
