# Copyright (C) 2025 Pedro Henrique / phkaiser13
# windows_ci.yml - Workflow de Integração Contínua para Windows.
#
# Este workflow automatiza o processo de build e release da aplicação em um
# ambiente Windows, garantindo que o projeto compile corretamente e criando
# pacotes de distribuição .zip quando uma nova versão é marcada.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest # Utiliza o executor mais recente do Windows

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Instala as dependências de sistema via Chocolatey
      #    Chocolatey é um gerenciador de pacotes comum em runners do Windows.
      - name: Instalar dependências do sistema
        run: |
          choco install -y cmake git lua.install libcurl nlohmann-json

      # 3. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 4. Configura o ambiente Rust (com cache integrado)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 5. Configura o projeto usando CMake
      #    O gerador "Visual Studio" é o padrão em runners do Windows, mas especificar é uma boa prática.
      - name: Configurar CMake
        run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release

      # 6. Compila o projeto
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel

      # 7. Salva os artefatos de build para o job de release
      #    Os caminhos são adaptados para a saída do Windows (.exe, .dll)
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/gitph.exe
            build/bin/modules/Release/*.dll
            src/plugins/
            LICENSE

  release:
    name: Criar Release (Windows)
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: artifacts/

      # 3. Empacota os arquivos de release usando PowerShell
      - name: Empacotar para Release
        shell: pwsh
        run: |
          # Determina a versão a partir da tag do Git e o nome do pacote
          $VERSION = "${{ github.ref_name }}"
          $RELEASE_NAME = "gitph-${VERSION}-windows-${{ runner.arch }}"
          
          # Cria a estrutura de diretórios final
          $RELEASE_DIR = "release/${RELEASE_NAME}"
          New-Item -ItemType Directory -Force -Path "$RELEASE_DIR/modules"
          
          # Copia os arquivos para a estrutura final
          Copy-Item -Path "artifacts/*" -Destination "$RELEASE_DIR/" -Exclude "plugins" -Recurse
          Copy-Item -Path "artifacts/plugins/*" -Destination "$RELEASE_DIR/modules/"
          
          # Cria o arquivo .zip usando o PowerShell, que é nativo do Windows
          echo "Criando o pacote .zip..."
          Compress-Archive -Path "$RELEASE_DIR/*" -DestinationPath "release/${RELEASE_NAME}.zip"
          
          # Exporta o caminho do pacote para o próximo passo
          echo "RELEASE_PATH=release/${RELEASE_NAME}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      # 4. Cria a Release no GitHub e faz o upload do pacote .zip
      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
