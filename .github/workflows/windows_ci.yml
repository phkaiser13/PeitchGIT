name: Build do gitph no Windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build no Windows
    runs-on: windows-latest

    # Define onde vamos instalar o vcpkg no runner (variável usada nas etapas)
    env:
      VCPKG_ROOT: ${{ runner.temp }}/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache vcpkg (installed / buildtrees / downloads / archives)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.VCPKG_ROOT }}/installed
            ${{ env.VCPKG_ROOT }}/packages
            ${{ env.VCPKG_ROOT }}/buildtrees
            ${{ env.VCPKG_ROOT }}/downloads
            ${{ env.VCPKG_ROOT }}/archives
          # se tiver vcpkg.json na raiz do repositório, o hash muda quando as deps mudarem
          key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}

      - name: Install vcpkg (clone + bootstrap)
        shell: pwsh
        run: |
          if (-not (Test-Path $env:VCPKG_ROOT)) {
            git clone https://github.com/microsoft/vcpkg.git $env:VCPKG_ROOT
          } else {
            Write-Host "vcpkg já existe em $env:VCPKG_ROOT"
          }
          Push-Location $env:VCPKG_ROOT
          .\bootstrap-vcpkg.bat -disableMetrics
          Pop-Location

      - name: Instalar dependências com vcpkg (curl, lua, nlohmann-json)
        shell: pwsh
        run: |
          # Use o triplet definido (x64-windows). Ajuste se você usa x64-windows-static ou outro.
          & "$env:VCPKG_ROOT\vcpkg.exe" install curl lua nlohmann-json --triplet $env:VCPKG_DEFAULT_TRIPLET

      - name: Mostrar info vcpkg (debug)
        shell: pwsh
        run: |
          Write-Host "VCPKG_ROOT = $env:VCPKG_ROOT"
          & "$env:VCPKG_ROOT\vcpkg.exe" list
          & "$env:VCPKG_ROOT\vcpkg.exe" integrate project || true

      - name: Setup CMake (opcional - garante cmake disponível)
        uses: lukka/get-cmake@v3

      - name: Configurar CMake com toolchain do vcpkg
        shell: pwsh
        run: |
          $toolchain = Join-Path $env:VCPKG_ROOT 'scripts\buildsystems\vcpkg.cmake'
          cmake -S . -B build `
            -DCMAKE_TOOLCHAIN_FILE="$toolchain" `
            -DVCPKG_TARGET_TRIPLET=$env:VCPKG_DEFAULT_TRIPLET `
            -DCMAKE_BUILD_TYPE=Release

      - name: Compilar (Release)
        shell: pwsh
        run: |
          cmake --build build --config Release --parallel

      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-windows-artifacts
          path: |
            build/bin/
            src/plugins/
            LICENSE
