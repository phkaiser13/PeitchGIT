name: Build para Windows (Corrigido)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build em Windows (MSVC)
    runs-on: windows-latest

    steps:
      # 1. Checkout do código
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Setup Rust com cache
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      # 4. Instalar vcpkg e dependências (cache automático)
      #    Esta action simplifica a instalação e o cache do vcpkg.
      - name: Setup vcpkg
        uses: microsoft/vcpkg-tool-action@main
      
      - name: Instalar dependências com vcpkg
        run: |
          vcpkg install curl lua nlohmann-json --triplet x64-windows

      # 5. Configurar CMake com o toolchain do vcpkg
      #    A action do vcpkg define a variável de ambiente VCPKG_ROOT,
      #    que podemos usar para encontrar o toolchain file de forma confiável.
      - name: Configurar CMake
        run: |
          cmake -S . -B build `
            -G "Visual Studio 17 2022" -A x64 `
            -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake `
            -DVCPKG_TARGET_TRIPLET=x64-windows

      # 6. Compilar o projeto
      - name: Compilar projeto
        run: cmake --build build --config Release --parallel

      # 7. (PASSO CRÍTICO) Copiar as DLLs necessárias para o diretório do executável
      #    Isso garante que o gitph.exe consiga encontrar suas dependências ao ser executado.
      - name: Copiar DLLs das dependências
        run: |
          $VCPKG_INSTALL_DIR = Join-Path $env:VCPKG_ROOT "installed/x64-windows/bin"
          $OUTPUT_DIR = "build/bin/Release" # O CMake coloca o executável aqui no modo Release
          Copy-Item -Path "$VCPKG_INSTALL_DIR/*.dll" -Destination $OUTPUT_DIR
        shell: powershell
        
      # 8. (Opcional) Adicionar um passo para verificar se o executável funciona
      - name: Verificar execução
        run: |
          cd build/bin/Release
          ./gitph.exe --version
        shell: bash
