# Copyright (C) 2025 Pedro Henrique / phkaiser13
# windows_build.yml - Workflow de Integração Contínua para Windows.
#
# Este workflow valida a compilação do projeto no ambiente Windows,
# garantindo que todas as dependências (C++, Rust, Go) são resolvidas
# e que o projeto compila com sucesso usando o toolchain do Visual Studio
# e o gerenciador de pacotes vcpkg.
#
# SPDX-License-Identifier: Apache-2.0

name: Build para Windows

# Gatilhos do workflow:
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build em Windows (MSVC)
    runs-on: windows-latest

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Configura o ambiente Rust (com cache integrado)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 4. Setup vcpkg e Instalar dependências
      #    CORREÇÃO 1: Adicionado um 'id' ao passo para que possamos referenciar seus outputs.
      - name: Setup vcpkg e Instalar dependências
        id: vcpkg
        uses: johnwason/vcpkg-action@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          pkgs: curl lua nlohmann-json
          triplet: x64-windows

      # 5. Configura o projeto com CMake
      #    CORREÇÃO 2: Usamos o output 'vcpkg-root' do passo com id 'vcpkg'.
      #    Esta é a forma mais robusta de passar valores entre os passos.
      - name: Configurar CMake
        run: cmake -S . -B build -D "CMAKE_TOOLCHAIN_FILE=${{ steps.vcpkg.outputs.vcpkg-root }}/scripts/buildsystems/vcpkg.cmake"
        shell: powershell

      # 6. Compila o projeto
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel
