# Copyright (C) 2025 Pedro Henrique / phkaiser13
# windows_ci.yml - Workflow de Integração Contínua para Windows.
#
# SPDX-License-Identifier: Apache-2.0

name: Build e Release do gitph (Windows)

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build e Teste (Windows)
    runs-on: windows-latest

    steps:
      # 1. Clona o repositório
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Configura o ambiente Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Configura o ambiente Rust (com cache)
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      # 4. Instala as dependências C++ via vcpkg usando o vcpkg.json
      #    Esta versão é mais direta e robusta.
      - name: Setup Vcpkg
        uses: lukka/run-vcpkg@v11
        # Não precisa mais de parâmetros extras, a action encontrará o vcpkg.json

      # 5. Configura o projeto com CMake, usando o toolchain do vcpkg
      #    A variável VCPKG_ROOT é exportada automaticamente pela action anterior.
      - name: Configurar CMake
        run: |
          cmake -S . -B build `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        shell: pwsh # Usando PowerShell para consistência no Windows

      # 6. Compila o projeto com CMake
      - name: Compilar Projeto
        run: cmake --build build --config Release --parallel

      # 7. Salva os artefatos de build (.exe e .dlls)
      - name: Upload dos artefatos de build
        uses: actions/upload-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: |
            build/bin/Release/
            src/plugins/
            LICENSE

  # Job de release (sem alterações, já estava correto)
  release:
    name: Criar Release (Windows)
    needs: build
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Download dos artefatos de build
        uses: actions/download-artifact@v4
        with:
          name: gitph-build-artifacts-windows
          path: artifacts/

      - name: Empacotar para Release (ZIP)
        shell: pwsh
        run: |
          $VERSION = "${{ github.ref_name }}"
          $RELEASE_NAME = "gitph-${VERSION}-windows-x64"
          $RELEASE_PATH = "release/$RELEASE_NAME"
          New-Item -ItemType Directory -Force -Path $RELEASE_PATH
          Copy-Item -Path "artifacts/*" -Destination $RELEASE_PATH -Recurse
          Compress-Archive -Path "$RELEASE_PATH/*" -DestinationPath "release/${RELEASE_NAME}.zip"
          echo "RELEASE_PATH=release/${RELEASE_NAME}.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Publicar Release no GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.RELEASE_PATH }}
          generate_release_notes: true
