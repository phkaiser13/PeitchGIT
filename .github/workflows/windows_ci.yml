name: Build para Windows (Corrigido e Confiável)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build em Windows (MSVC)
    runs-on: windows-latest

    steps:
      # 1. Checkout do código
      - name: Checkout do código
        uses: actions/checkout@v4

      # 2. Setup Go
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      # 3. Setup Rust com cache
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      # 4. Instalar vcpkg manualmente (método mais robusto)
      - name: Instalar vcpkg e dependências
        run: |
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          C:/vcpkg/bootstrap-vcpkg.bat
          C:/vcpkg/vcpkg.exe install curl lua nlohmann-json --triplet x64-windows
        shell: cmd

      # 5. Configurar CMake usando o toolchain do vcpkg
      - name: Configurar CMake
        run: >
          cmake -S . -B build
          -G "Visual Studio 17 2022" -A x64
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        shell: cmd

      # 6. Compilar o projeto
      - name: Compilar projeto
        run: cmake --build build --config Release --parallel

      # 7. COPIAR DLLs (PASSO CRÍTICO PARA FUNCIONAR)
      #    Copia as DLLs das dependências para junto do executável
      - name: Copiar DLLs das dependências para a pasta de build
        run: |
          $vcpkgPath = "C:/vcpkg/installed/x64-windows/bin"
          $buildPath = "${{ github.workspace }}/build/bin/Release"
          Copy-Item -Path "$vcpkgPath/*.dll" -Destination $buildPath
        shell: powershell

      # 8. (Opcional mas recomendado) Testar a execução
      - name: Verificar se o executável roda
        run: |
          ./build/bin/Release/gitph.exe --version
        shell: bash
