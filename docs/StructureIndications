gitph/
├── .github/
│   ├── ISSUE_TEMPLATE/
│   │   ├── bug_report.md
│   │   └── feature_request.md
│   └── WORKFLOWS/
│       └── main_ci.yml
├── build/
│   └── (Artefatos de compilação - ignorado pelo Git)
├── docs/
│   ├── architecture.md
│   ├── api_reference.md
│   └── user_guide.md
├── scripts/
│   ├── build.sh                # Script de build para Linux/macOS
│   ├── build.bat               # Script de build para Windows
│   ├── setup_dev_env.sh        # Configura ambiente de dev (instala deps)
│   ├── release.sh              # Automatiza o processo de criação de release
│   └── check_deps.sh           # Verifica dependências (Git, compiladores, etc.)
├── src/
│   ├── core/                   # O coração da aplicação em C (40-45%)
│   │   ├── cli/                # Lógica de parsing de argumentos e despacho de comandos
│   │   │   ├── cli_parser.c
│   │   │   └── cli_parser.h
│   │   ├── config/             # Gerenciamento de configuração (.gitph.conf)
│   │   │   ├── config_manager.c
│   │   │   └── config_manager.h
│   │   ├── main/               # Ponto de entrada e loop principal da aplicação
│   │   │   └── main.c
│   │   ├── module_loader/      # Carregador dinâmico de módulos (.so, .dll)
│   │   │   ├── loader.c
│   │   │   └── loader.h
│   │   ├── platform/           # Código específico de plataforma (Windows, POSIX)
│   │   │   ├── platform_posix.c
│   │   │   ├── platform_win.c
│   │   │   └── platform.h
│   │   ├── scripting/          # Integração com o interpretador Lua
│   │   │   ├── lua_bridge.c
│   │   │   └── lua_bridge.h
│   │   └── ui/                 # Renderização da interface de console (menus, prompts)
│   │       ├── tui.c
│   │       └── tui.h
│   │
│   ├── ipc/                    # Interface de Comunicação e Contratos
│   │   ├── include/
│   │   │   └── gitph_core_api.h # Header C definindo a API para todos os módulos
│   │   └── schemas/
│   │       └── rpc_data.proto   # (Opcional) Definições Protobuf/JSON para IPC
│   │
│   ├── libs/                   # Bibliotecas internas compartilhadas
│   │   ├── libcommon/          # Utilitários e estruturas de dados comuns (C)
│   │   │   ├── utils.c
│   │   │   └── utils.h
│   │   └── liblogger/          # Sistema de log avançado (C++)
│   │       ├── Logger.cpp
│   │       └── Logger.h
│   │
│   ├── modules/                # Módulos de funcionalidades (Polyglot)
│   │   ├── git_ops/            # Operações Git fundamentais (Rust)
│   │   │   ├── Cargo.toml
│   │   │   └── src/
│   │   │       ├── lib.rs
│   │   │       ├── commands.rs
│   │   │       └── git_wrapper.rs
│   │   ├── api_client/         # Cliente para APIs (GitHub, GitLab, etc.) (Go)
│   │   │   ├── go.mod
│   │   │   ├── client.go
│   │   │   └── github_handler.go
│   │   ├── ci_cd_manager/      # Gerenciamento de Pipelines e CI/CD (Go/C++)
│   │   │   ├── go.mod
│   │   │   ├── parser.go       # Parser de YAML de workflows
│   │   │   └── visualizer/     # (C++) Lógica para visualização de pipeline
│   │   │       ├── PipelineVisualizer.cpp
│   │   │       └── PipelineVisualizer.h
│   │   ├── devops_automation/  # Automação de DevOps (IaC, Secrets) (Go)
│   │   │   ├── go.mod
│   │   │   ├── terraform_runner.go
│   │   │   └── secret_manager.go
│   │   ├── issue_tracker/      # Integração com gerenciadores de Issues (Rust)
│   │   │   ├── Cargo.toml
│   │   │   └── src/
│   │   │       ├── lib.rs
│   │   │       └── issue_service.rs
│   │   └── sync_engine/        # Motor de sincronização entre repositórios (Rust)
│   │       ├── Cargo.toml
│   │       └── src/
│   │           ├── lib.rs
│   │           └── sync.rs
│   │
│   └── plugins/                # Scripts Lua para extensão do usuário (5-8%)
│       ├── custom_aliases.lua
│       └── pre_push_hook.lua
│
├── installer/
│   ├── nsis/                   # Scripts para o instalador NSIS (Windows)
│   │   └── gitph_installer.nsi
│   └── src/                    # Código fonte do instalador (C puro)
│       ├── installer_main.c    # Lógica principal: checar Git, vars de ambiente
│       └── download.c          # Função para baixar o Git se necessário
│
├── CMakeLists.txt              # Arquivo principal do CMake para orquestrar o build
└── Makefile                    # Makefile de alto nível para conveniência
