# /* Copyright (C) 2025 Pedro Henrique / phkaiser13
# * Cargo.toml - Rust project manifest for the api_client module.
# *
# * This file replaces go.mod and defines the entire Rust project configuration.
# * It specifies metadata, dependencies, and the library target.
# * The `crate-type = ["cdylib"]` is essential for creating a C-compatible
# * dynamic library that the main application can load via FFI.
# *
# * We use `reqwest` for robust HTTP requests, `tokio` as the async runtime,
# * `serde` for high-performance JSON deserialization, and `once_cell` for
# * safe, one-time initialization of global statics, which is a core pattern
# * for managing state in an FFI context.
# *
# * SPDX-License-Identifier: Apache-2.0 */

[package]
name = "api_client"
version = "1.1.0"
edition = "2021"

[lib]
# This tells Rust to build a C-style dynamic library.
crate-type = ["cdylib"]

[dependencies]
# The `libc` crate provides the raw C type definitions (c_char, c_int, etc.).
libc = "0.2"

# High-performance, asynchronous HTTP client. The 'json' feature enables
# seamless integration with serde_json.
reqwest = { version = "0.12", features = ["json"] }

# The de-facto standard for high-performance data serialization/deserialization in Rust.
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# The asynchronous runtime needed by `reqwest`. We use the 'full' feature
# to get the multi-threaded runtime and time utilities.
tokio = { version = "1", features = ["full"] }

# A utility for safe, one-time initialization of static variables.
# This is perfect for our FFI context to manage the Tokio runtime and
# module info without unsafe mutable statics.
once_cell = "1.19"

# FIX: Adicionado para corrigir o erro de 'dyn Trait'
async-trait = "0.1.77"
